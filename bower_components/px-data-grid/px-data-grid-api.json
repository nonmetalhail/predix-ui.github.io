{"schema_version":"1.0.0","elements":[{"description":"","summary":"","path":"../px-data-grid/px-data-grid-header-cell.html","properties":[{"name":"dropdownOpened","type":"boolean","description":"If true, opens nested dropdown.","privacy":"public","sourceRange":{"start":{"line":52,"column":12},"end":{"line":55,"column":13}},"metadata":{"polymer":{"observer":"\"_dropdownOpenedChanged\""}}},{"name":"groupByColumnAllowed","type":"boolean","description":"","privacy":"public","sourceRange":{"start":{"line":57,"column":12},"end":{"line":60,"column":13}},"metadata":{"polymer":{}},"defaultValue":"true"},{"name":"_dropdownHidden","type":"boolean","description":"","privacy":"protected","sourceRange":{"start":{"line":62,"column":12},"end":{"line":65,"column":13}},"metadata":{"polymer":{}},"defaultValue":"true"},{"name":"_mouseover","type":"boolean","description":"","privacy":"protected","sourceRange":{"start":{"line":67,"column":12},"end":{"line":70,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"_column","type":"Object","description":"","privacy":"protected","sourceRange":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"metadata":{"polymer":{}}},{"name":"_dropdownItems","type":"Array","description":"","privacy":"protected","sourceRange":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"metadata":{"polymer":{}}},{"name":"localize","type":"Function","description":"","privacy":"public","sourceRange":{"start":{"line":80,"column":12},"end":{"line":80,"column":30}},"metadata":{"polymer":{}}}],"methods":[{"name":"ready","description":"","privacy":"protected","sourceRange":{"start":{"line":90,"column":8},"end":{"line":108,"column":9}},"metadata":{},"params":[]},{"name":"_freezeColumn","description":"","privacy":"protected","sourceRange":{"start":{"line":110,"column":8},"end":{"line":120,"column":9}},"metadata":{},"params":[]},{"name":"_unfreezeColumn","description":"","privacy":"protected","sourceRange":{"start":{"line":122,"column":8},"end":{"line":132,"column":9}},"metadata":{},"params":[]},{"name":"_hideColumn","description":"","privacy":"protected","sourceRange":{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},"metadata":{},"params":[]},{"name":"_groupByColumn","description":"","privacy":"protected","sourceRange":{"start":{"line":138,"column":8},"end":{"line":148,"column":9}},"metadata":{},"params":[]},{"name":"_ungroup","description":"","privacy":"protected","sourceRange":{"start":{"line":150,"column":8},"end":{"line":160,"column":9}},"metadata":{},"params":[]},{"name":"_setDropdownItems","description":"","privacy":"protected","sourceRange":{"start":{"line":162,"column":8},"end":{"line":229,"column":9}},"metadata":{},"params":[]},{"name":"_dropdownOpenedChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":231,"column":8},"end":{"line":250,"column":9}},"metadata":{},"params":[{"name":"dropdownOpened"}]},{"name":"_dropdownItemClick","description":"","privacy":"protected","sourceRange":{"start":{"line":252,"column":8},"end":{"line":258,"column":9}},"metadata":{},"params":[{"name":"e"}]},{"name":"_dropdownClick","description":"","privacy":"protected","sourceRange":{"start":{"line":260,"column":8},"end":{"line":263,"column":9}},"metadata":{},"params":[{"name":"e"}]},{"name":"_canBeHidden","description":"","privacy":"protected","sourceRange":{"start":{"line":265,"column":8},"end":{"line":274,"column":9}},"metadata":{},"params":[]}],"staticMethods":[],"demos":[],"metadata":{},"sourceRange":{"start":{"line":42,"column":6},"end":{"line":275,"column":7}},"privacy":"public","superclass":"HTMLElement","name":"DataGridHeaderCellElement","attributes":[{"name":"dropdown-opened","description":"If true, opens nested dropdown.","sourceRange":{"start":{"line":52,"column":12},"end":{"line":55,"column":13}},"metadata":{},"type":"boolean"},{"name":"group-by-column-allowed","description":"","sourceRange":{"start":{"line":57,"column":12},"end":{"line":60,"column":13}},"metadata":{},"type":"boolean"},{"name":"localize","description":"","sourceRange":{"start":{"line":80,"column":12},"end":{"line":80,"column":30}},"metadata":{},"type":"Function"}],"events":[],"styling":{"cssVariables":[],"selectors":[]},"slots":[{"description":"","name":"","range":{"file":"px-data-grid/px-data-grid-header-cell.html","start":{"line":38,"column":4},"end":{"line":38,"column":17}}}],"tagname":"px-data-grid-header-cell"},{"description":"","summary":"","path":"../px-data-grid/px-data-grid-sorter.html","properties":[{"name":"path","type":"string","description":"JS Path of the property in the item used for sorting the data.","privacy":"public","sourceRange":{"start":{"line":46,"column":12},"end":{"line":46,"column":24}},"metadata":{"polymer":{}}},{"name":"direction","type":"string","description":"How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.","privacy":"public","sourceRange":{"start":{"line":53,"column":12},"end":{"line":58,"column":13}},"metadata":{"polymer":{"notify":true}},"defaultValue":"null"},{"name":"_order","type":"number","description":"","privacy":"protected","sourceRange":{"start":{"line":60,"column":12},"end":{"line":63,"column":13}},"metadata":{"polymer":{}},"defaultValue":"null"},{"name":"_isConnected","type":"boolean","description":"","privacy":"protected","sourceRange":{"start":{"line":65,"column":12},"end":{"line":68,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"}],"methods":[{"name":"ready","description":"","privacy":"protected","sourceRange":{"start":{"line":79,"column":8},"end":{"line":82,"column":9}},"metadata":{},"params":[]},{"name":"connectedCallback","description":"","privacy":"public","sourceRange":{"start":{"line":84,"column":8},"end":{"line":87,"column":9}},"metadata":{},"params":[]},{"name":"disconnectedCallback","description":"","privacy":"public","sourceRange":{"start":{"line":89,"column":8},"end":{"line":92,"column":9}},"metadata":{},"params":[]},{"name":"_pathOrDirectionChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":94,"column":8},"end":{"line":109,"column":9}},"metadata":{},"params":[{"name":"path"},{"name":"direction"},{"name":"isConnected"}]},{"name":"_getDisplayOrder","description":"","privacy":"protected","sourceRange":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"metadata":{},"params":[{"name":"order"}]},{"name":"_getDirectionIcon","description":"","privacy":"protected","sourceRange":{"start":{"line":115,"column":8},"end":{"line":123,"column":9}},"metadata":{},"params":[{"name":"direction"}]},{"name":"_isOrdered","description":"","privacy":"protected","sourceRange":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"metadata":{},"params":[]},{"name":"_onClick","description":"","privacy":"protected","sourceRange":{"start":{"line":129,"column":8},"end":{"line":145,"column":9}},"metadata":{},"params":[{"name":"e"}]},{"name":"_directionOrOrderChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":147,"column":8},"end":{"line":161,"column":9}},"metadata":{},"params":[{"name":"direction"},{"name":"order"}]}],"staticMethods":[],"demos":[],"metadata":{},"sourceRange":{"start":{"line":36,"column":6},"end":{"line":162,"column":7}},"privacy":"public","superclass":"HTMLElement","name":"GridSorterElement","attributes":[{"name":"path","description":"JS Path of the property in the item used for sorting the data.","sourceRange":{"start":{"line":46,"column":12},"end":{"line":46,"column":24}},"metadata":{},"type":"string"},{"name":"direction","description":"How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.","sourceRange":{"start":{"line":53,"column":12},"end":{"line":58,"column":13}},"metadata":{},"type":"string"}],"events":[{"type":"CustomEvent","name":"direction-changed","description":"Fired when the `direction` property changes.","metadata":{}}],"styling":{"cssVariables":[],"selectors":[]},"slots":[{"description":"","name":"","range":{"file":"px-data-grid/px-data-grid-sorter.html","start":{"line":26,"column":6},"end":{"line":26,"column":19}}}],"tagname":"px-data-grid-sorter"},{"description":"`<px-data-grid>` - Predix UI component which defines a data grid.","summary":"","path":"../px-data-grid/px-data-grid.html","properties":[{"name":"filterable","type":"boolean","description":"Set to enable advanced filtering. When enabled, a filter\nbutton will be shown at the top of the grid. When the user clicks\non the filter button, a modal will be shown and the user can\nfilter visible items using different UI patterns.\n\nColumns should have the right `columns.type` set to ensure the\nadvanced filtering works as expected. See the `columns` property\nfor more information on setting the type, and for more advanced\nfiltering options that can be customized for `number` and `date`\ntype columns.","privacy":"public","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":38,"column":8},"end":{"line":41,"column":9}},"metadata":{"polymer":{}},"defaultValue":"false","inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_filters","type":"Array","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":43,"column":8},"end":{"line":45,"column":9}},"metadata":{"polymer":{}},"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_initialFilterState","type":"Array","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":47,"column":8},"end":{"line":50,"column":9}},"metadata":{"polymer":{}},"defaultValue":"[]","inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_filterHighlights","type":"Array","description":"Array of highlights from px-data-grid-filter component.","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":55,"column":8},"end":{"line":58,"column":9}},"metadata":{"polymer":{}},"defaultValue":"[]","inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"tableData","type":"Array","description":"Data for the table to display.\n\nPass an array of objects. Each object will be rendered as a row\nin the grid. The objects should share many of the same keys.\nEach key will be used to group data into columns.\n\nUse the `columns` property to control which keys are displayed\nto the user and which are not, and to control how the grid\nhandles the data for each column. By default if no `columns` are\ndefined the grid will automatically create columns from all of\nthe keys found in the first object.\n\nExample data:\n\n```\n[\n  {\n    first: 'Elizabeth',\n    last: 'Wong',\n    email: 'sika@iknulber.cl'\n  },\n  {\n    first: 'Jeffrey',\n    last: 'Hamilton',\n    email: 'cofok@rac.be'\n  },\n  {\n    first: 'Alma',\n    last: 'Martin',\n    email: 'dotta@behtam.la'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":263,"column":12},"end":{"line":266,"column":13}},"metadata":{"polymer":{"notify":true}}},{"name":"hideSelectionColumn","type":"boolean","description":"Set to hide the selection checkbox for each row.\n\nBy default, if the `selectionMode` property is set to `'single'`\nor `'multi'` the grid shows a checkbox/radio button the user\ncan click to select or deselect a row. When this property is\nenabled, the checkbox is hidden and the user can click directly\non row contents to select or deselect a row.","privacy":"public","sourceRange":{"start":{"line":277,"column":12},"end":{"line":280,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"selectedItems","type":"Array","description":"Array of selected items. Automatically updated by the grid when\nthe user selects items. Each item will be a reference to the\n`tableData` item that was passed to render the row.\n\nAdd references to `tableData` items to programmatically select\nitems from your application.","privacy":"public","sourceRange":{"start":{"line":290,"column":12},"end":{"line":294,"column":13}},"metadata":{"polymer":{"notify":true}},"defaultValue":"[]"},{"name":"size","type":"number","description":"The total number of items","privacy":"public","sourceRange":{"start":{"line":300,"column":12},"end":{"line":303,"column":13}},"metadata":{"polymer":{}}},{"name":"pageSize","type":"number","description":"The number of items fetched during each request to the\n`remoteDataProvider`. See the `remoteDataProvider` property\nfor more information.","privacy":"public","sourceRange":{"start":{"line":310,"column":12},"end":{"line":313,"column":13}},"metadata":{"polymer":{}}},{"name":"multiSort","type":"boolean","description":"Set to `true` to allow the user to sort by multiple columns at\nthe same time.","privacy":"public","sourceRange":{"start":{"line":319,"column":12},"end":{"line":322,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"selectionMode","type":"string","description":"Sets the current selection mode for the grid. Valid modes are:\n\n  * `'none'` - User can't select any rows\n  * `'single'` - User can select one row at a time\n  * `'multi'` - User can select multiple rows at the same time","privacy":"public","sourceRange":{"start":{"line":331,"column":12},"end":{"line":335,"column":13}},"metadata":{"polymer":{"observer":"\"_selectionModeChanged\""}},"defaultValue":"\"none\""},{"name":"activeItem","type":"Object","description":"The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.","privacy":"public","sourceRange":{"start":{"line":342,"column":12},"end":{"line":346,"column":13}},"metadata":{"polymer":{"notify":true}},"defaultValue":"null"},{"name":"resizable","type":"boolean","description":"Set to `true` to allow the user to resize columns.","privacy":"public","sourceRange":{"start":{"line":351,"column":12},"end":{"line":354,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"editable","type":"boolean","description":"Set to allow users to edit data in the grid. You must also\nexplicitly set the `columns.editable` property to true for each\ncolumn the user can edit in the grid.\n\nWhen the user starts or stops editing a row the\n`editing-item-changed` event will be fired. `event.detail.item`\nwill contain a reference to the row being edited.\n\nAfter a user finishes editing a row the `item-edited` event\nwill be fired. `event.detail` will contain information about\nwhat the user changed.","privacy":"public","sourceRange":{"start":{"line":369,"column":12},"end":{"line":372,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"columnReorderingAllowed","type":"boolean","description":"Set to `true` to allow the user to re-order columns by dragging\nand dropping them. Can't be combined with some other states like\ngroup-by-value.","privacy":"public","sourceRange":{"start":{"line":379,"column":12},"end":{"line":382,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"expandedItems","type":"Array","description":"An array containing references to the expanded rows.\n\nAutomatically updated by the grid in the following cases:\n\n  * When a `row-details` template is provided to create expandable\n    rows the grid will add rows to this list when they are\n    expanded by the user, and remove rows when they are collapsed\n    by the user.\n  * When the user groups rows by column the grid will add rows\n    that the user expands and remove rows the user collapses.\n\nSet this value to references to rows to expand or collapse\nthe rows programmatically.","privacy":"public","sourceRange":{"start":{"line":399,"column":12},"end":{"line":403,"column":13}},"metadata":{"polymer":{"notify":true}},"defaultValue":"[]"},{"name":"_rowDetails","type":"boolean","description":"Automatically set to truthy value when `<template class=\"row-details\">`\nis distributed in the data grid. Passing a row-details template\nmakes all rows expandable (by adding a chevron icon to the left\nof the row).\n\nWhen the user expands the row the grid stamps out a new instance\nof the row-details template and sets `item` in the template's\nscope to the expanded row.\n\nExample of using row-details:\n\n```\n<px-data-grid table-data='[{ \"name\": \"Elliot\" }]'>\n  <template class=\"row-details\">\n    <p>This user's name is [[item.name]], in case you were wondering.</p>\n  </template>\n</px-data-grid>\n```","privacy":"protected","sourceRange":{"start":{"line":425,"column":12},"end":{"line":428,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"hideActionMenu","type":"boolean","description":"Set to hide the action menu button displayed at the top right of\nthe grid.\n\nIf the action menu is hidden, the user will not be able to unhide\nany hidden columns.","privacy":"public","sourceRange":{"start":{"line":437,"column":12},"end":{"line":440,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"columns","type":"Array","description":"Defines the columns the grid should render. If no columns are\npassed, the grid generates columns from the `tableData` passed\nin. Columns are rendered in the same order as the array.\n\n## `column` options\n\nThe following options are available for all column types. Only\n`name` and `path` are required, all others are optional:\n\n  * `{string} name` - Human-readable name displayed in the column\n    header\n\n  * `{string} path` - Key used to get the column data from each\n    of the `tableData` objects\n\n  * `{string} id='column.path[column.type]'` - Unique identifier\n    of the column. By default, px-data-grid will automatically\n    generate it from `column.path` and `column.type`. There can't\n    be 2 columns with the same id. The value `-any-` is a\n    reserved keyword that you cannot use for any column `id`.\n\n  * `{string} type=('string'|'number'|'date')` - Type of data\n    in the column. Used in the advanced filter UI to show\n    different filter options for each data type. Does not change\n    the renderer or impact sorting.\n\n  * `{string} renderer` - The name of the web component used to\n    render each cell in the column. There are three built-in\n    renderers available: `'px-data-grid-string-renderer'` (the\n    default renderer), `'px-data-grid-number-renderer'`, and\n    `'px-data-grid-date-renderer'`. You can also create a custom\n    renderer and use its name here. If no renderer is specified,\n    the column cannot be edited by the user.\n\n  * `{object} rendererConfig` - Settings to pass to the renderer\n    that change how data is displayed to the user. See the\n    examples below for information on which options are available\n    for each built-in renderer.\n\nThe following options are available for columns of type `date`:\n\n  * `{array} dateRanges` - List of pre-defined date ranges that\n    will appear in advanced filter dropdown for this column.\n    See the examples below for examples on how to format\n    each date range.\n\nThe following options are available for columns of type `number`:\n\n  * `{number} minBound` - Defines a minimum bound of a number in\n    the advanced filter field for this column. If both minBound\n    and maxBound properties are defined, the advanced filter will\n    display a slider instead of a condition dropdown.\n\n  * `{number} maxBound` - Defines a maximum bound of a number in\n    the advanced filter field for this column.\n\n  * `{boolean} hidden=false` - Hides the column from the user\n    when the grid is rendered. Automatically updated when the\n    user shows/hides columns using action menu(s).\n\n  * `{boolean} frozen=false` - Freezes the column. When the user\n    scrolls the grid horizontally frozen columns will not move.\n    Automatically updated when the user freezes/unfreezes columns\n    using action menu(s).\n\n  * `{boolean} required=false` - Used in renderers during editing.\n    If the column is required, the user will not be allowed to\n    enter a blank value.\n\n  * `{number} flexGrow=1` - Sets the relative size of the column\n    compared to other columns in the grid. Equivalent to the CSS\n    `flex-grow` property.\n\n\n## `column.dateFormat` options\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `date`. All formats should be set to a valid\n[moment.js format string](https://momentjs.com/docs/#/parsing/string-format/)\nor to 'ISO':\n\n  * `{string} dateFormat.format='YYYY-MM-DD HH:mm:ss'` -\n    Format used to read the date/timestamp data.\n\n  * `{string} dateFormat.timezone='UTC'` -\n    Timezone used to read the date/timestamp data.\n\n\n## `column.rendererConfig` options\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `date`. All formats should be set to a valid\n[moment.js format string](https://momentjs.com/docs/#/parsing/string-format/)\nor to 'ISO':\n\n  * `{string} rendererConfig.displayFormat='YYYY-MM-DD HH:mm:ss'` -\n    Format used to display the date/timestamp for the user.\n\n  * `{string} rendererConfig.timezone='UTC'` -\n    Timezone used to display the date/timestamp for the user.\n\n  * `{string} rendererConfig.datePickerDateFormat='YYYY-MM-DD'` -\n    Format used for the px-datetime-picker date when the user\n    edits cells in the column.\n\n  * `{string} rendererConfig.datePickerTimeFormat='HH:MM:SS'` -\n    Format used for the px-datetime-picker time when the user\n    edits cells in the column.\n\n  * `{boolean} rendererConfig.hideDate=false` - Hides the date\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\n  * `{boolean} rendererConfig.hideTime=true` - Hides the time\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `number`:\n\n  * `{?string} rendererConfig.displayFormat=null` - Format used to\n    display numbers in this column. Set to a valid\n    [numbro.js format string](http://numbrojs.com/format.html).\n    Set to `null` to display the number exactly as it appears\n    in the `tableData` by coercing it to string.\n\n  * `{string} rendererConfig.displayCulture='en-US'` - Changes the\n    way numbers in this column are displayed to the user by\n    localizing to get the correct format for commas, decimals,\n    etc. See [numbro.js languages](http://numbrojs.com/languages.html)\n    for a list of valid options.\n\n  * `{boolean} rendererConfig.displayIsCurrency=false` - Set to\n    `true` if the data in this column should be formatted as\n    currency. Will use `rendererConfig.displayFormat` to figure\n    out how to display the currency, or fall back to a localized\n    default based on `rendererConfig.displayCulture`.\n\n  * `{string} displayZeroFormat` - Used to format numbers equal\n    to `0` in this column. See [numbro.js docs](http://numbrojs.com/format.html)\n    for a list of valid options.\n\n## Examples\n\nExample format for a single column with all configurations used:\n\n```javascript\n{\n  id: 'first[string]',\n  name: 'First Name',\n  path: 'first',\n  type: 'string',\n  renderer: 'px-data-grid-string-renderer',\n  rendererConfig: {\n    customInfo: 'some info',\n    customInfo2: 42\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ],\n  minBound: 1,\n  maxBound: 10,\n  hidden: false,\n  frozen: false,\n  required: false,\n  flexGrow: 1\n}\n```\n\nExample format for column of type `date` with custom `dateRanges`:\n\n```javascript\n{\n  name: 'Birth date',\n  path: 'birth_date',\n  type: 'date',\n  editable: true,\n  renderer: 'px-data-grid-date-renderer',\n  dateFormat: {\n    format: 'YYYY-MM-DD HH:mm:ss',\n    timezone: 'UTC'\n  },\n  rendererConfig: {\n    displayFormat: 'MM/DD/YYYY HH:mm',\n    timezone: 'America/Los_Angeles',\n    datePickerDateFormat: 'MM/DD/YYYY',\n    datePickerTimeFormat: 'HH:mm'\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last 14 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(14, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'This month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(31, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').subtract(1, 'M').format(),\n          dateFrom: window.moment().tz('UTC').subtract(2, 'M').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ]\n}\n```","privacy":"public","sourceRange":{"start":{"line":699,"column":12},"end":{"line":703,"column":13}},"metadata":{"polymer":{"observer":"\"_columnsChanged\""}},"defaultValue":"[]"},{"name":"_lastColumnsReceived","type":"Array","description":"Copy of last columns value received, to be used with reset layout","privacy":"protected","sourceRange":{"start":{"line":708,"column":12},"end":{"line":711,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"_actionMenuContent","type":"Array","description":"Content of action menu","privacy":"protected","sourceRange":{"start":{"line":716,"column":12},"end":{"line":718,"column":13}},"metadata":{"polymer":{}}},{"name":"language","type":"string","description":"A valid IETF language tag as a string that `app-localize-behavior`\nwill use to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for\nAPI documentation and more information.","privacy":"public","sourceRange":{"start":{"line":727,"column":12},"end":{"line":730,"column":13}},"metadata":{"polymer":{}},"defaultValue":"\"en\""},{"name":"useKeyIfMissing","type":"boolean","description":"Use the key for localization if value for that language is missing.\nShould always be true for Predix components.","privacy":"public","sourceRange":{"start":{"line":736,"column":12},"end":{"line":739,"column":13}},"metadata":{"polymer":{}},"defaultValue":"true"},{"name":"resources","type":"Object","description":"Library object of hardcoded strings used in this application.\nUsed by `app-localize-behavior` in conjunction with `language`.","privacy":"public","sourceRange":{"start":{"line":745,"column":12},"end":{"line":769,"column":13}},"metadata":{"polymer":{}},"defaultValue":"{\"en\":{\"Actions\":\"Actions\",\"Freeze column\":\"Freeze Column\",\"Unfreeze column\":\"Unfreeze Column\",\"Group by column\":\"Group by Column\",\"Ungroup\":\"Ungroup\",\"Hide column\":\"Hide Column\"},\"fr\":{\"Actions\":\"Actions\",\"Value is required\":\"Pakollinen arvo\"},\"fi\":{\"Actions\":\"Toiminnot\",\"Hide column\":\"Piilota sarake\"}}"},{"name":"tableActions","type":"Array","description":"A list of custom actions that are shown when the user taps the\naction menu button at the top right of the grid. If the\n`hideActionMenu` property is enabled the action menu won't be\nshown to the user.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Export CSV\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`table-action` event. `event.detail.id` will be the action ID.\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Export CSV',\n    id: 'CSV'\n  }\n  {\n    name: 'Export Excel',\n    id: 'Excel'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":802,"column":12},"end":{"line":805,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"itemActions","type":"Array","description":"A list of custom actions that are shown in the actions menu\nfor each data row. The action menu button appears to the right\nof each row when the user hovers over the row.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Add Row After\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`item-action` event. `event.detail.id` will be the action ID and\n`event.detail.item` will be a reference to the row the user\ntook action on (from `tableData`).\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Add Row After',\n    id: 'add-after'\n  }\n  {\n    name: 'Delete Row',\n    id: 'delete'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":839,"column":12},"end":{"line":842,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"remoteDataProvider","type":"Function","description":"Function that provides items lazily. Receives arguments `params`, `callback`:\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders\n\n`params.parentItem` When expandable table is used, and sublevel items\nare requested, reference to parent item of the requested sublevel.\nOtherwise `undefined`.\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items.\n\n`<px-data-grid>` calls this function lazily, only when it needs more data\nto be displayed.\n\n__Also, note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(\n      response.employees, // requested page of items\n      response.totalSize  // total number of items\n    );\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```\n\n__Alternatively, you can use the `size` property to set the total number of items:__\n\n```javascript\npxDataGrid.size = 200; // The total number of items\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(response.employees);\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```","privacy":"public","sourceRange":{"start":{"line":906,"column":12},"end":{"line":909,"column":13}},"metadata":{"polymer":{"observer":"\"_remoteDataProviderChanged\""}}},{"name":"_currentDataProvider","type":"Function","description":"","privacy":"protected","sourceRange":{"start":{"line":911,"column":12},"end":{"line":913,"column":13}},"metadata":{"polymer":{}}},{"name":"_expandableRows","type":"boolean","description":"Automatically set to `true` when a row-details template is\nfound and rows are expandable.","privacy":"protected","sourceRange":{"start":{"line":919,"column":12},"end":{"line":922,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"striped","type":"boolean","description":"Set to add a background color to every other row in the grid.\nCan make it easier for users to scan across long rows. Striping\nis disabled in group-by-column mode.","privacy":"public","sourceRange":{"start":{"line":929,"column":12},"end":{"line":932,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"ellipsis","type":"boolean","description":"Set to show an ellipsis and truncate text for columns where the\ntext doesn't fit in the column.\n\nDo not enable wrap mode while ellipsis mode is enabled.","privacy":"public","sourceRange":{"start":{"line":940,"column":12},"end":{"line":944,"column":13}},"metadata":{"polymer":{"observer":"\"_ellipsisModeChanged\""}},"defaultValue":"false"},{"name":"_loading","type":"boolean","description":"Shows if there is any pending request for remote data.","privacy":"protected","sourceRange":{"start":{"line":949,"column":12},"end":{"line":953,"column":13}},"metadata":{"polymer":{"observer":"\"_loadingChanged\""}},"defaultValue":"false"},{"name":"_spinnerHidden","type":"boolean","description":"","privacy":"protected","sourceRange":{"start":{"line":955,"column":12},"end":{"line":958,"column":13}},"metadata":{"polymer":{}},"defaultValue":"true"},{"name":"loadingSpinnerDebounce","type":"number","description":"Number of milliseconds to wait before showing the loading spinner\nwhen requesting new data from the `remoteDataProvider`.","privacy":"public","sourceRange":{"start":{"line":964,"column":12},"end":{"line":967,"column":13}},"metadata":{"polymer":{}},"defaultValue":"500"},{"name":"autoFilter","type":"boolean","description":"Set to `true` to enable simple filtering. When enabled, a search\nbox will be shown at the top of the grid. The user can type\nin the search box to hide rows that don't include the stringified\nvalue they're looking for. The grid will search all columns and\ntreat all column types as strings for matching purposes.\n\nSee `filterable` property for a more advanced filter option.","privacy":"public","sourceRange":{"start":{"line":978,"column":12},"end":{"line":981,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"highlight","type":"Array","description":"List of rules used to highligh specific columns, rows, or cells.\n\nPass an array of objects. Each object should have the following\nproperties:\n\n  * `{string} type` - If the highlight condition returns `true`,\n    the type determines what the grid will highlight. Set to\n    `'cell'` to highlight only the cell that passed the highlight\n    rule, `'row'` to highlight the row that holds the matching\n    cell, or `'column'` to highlight the column that holds the\n    matching cell.\n  * `{Function} condition` - Function that will be called by the\n    grid for each cell. If the function returns `true`, the\n    highlight rule will be triggered. If the function returns a\n    falsey value, the highlight rule will not be used. The function\n    will be passed three arguments: `cellContent` containing\n    the text of the cell, `column` containing a reference to the\n    `columns` object for the cell's column, and `item` as a reference\n    to the `tableData` item used to create the cell's row.\n  * `{string} color` - A valid CSS color (e.g. hex code or color\n    name). If the highlight condition returns `true`, the color\n    will be used to set the background color of the matching\n    cell, column, or row.\n\nExample highlight rules:\n\n```javascript\n[\n  {\n    type: 'cell',\n    condition: (cellContent, column, item) => { return cellContent == 'John Doe' },\n  },\n  {\n    type: 'row',\n    condition: (cellContent, item) => { return cellContent[0] == 'a' },\n    color: '#a8a8a8'\n  },\n  {\n    type: 'column',\n    condition (column, item) => { return column.name == 'age' },\n    color: 'pink'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":1029,"column":12},"end":{"line":1032,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"_highlightEntities","type":"Array","description":"Concatenated array from user's highlights and filter's","privacy":"protected","sourceRange":{"start":{"line":1037,"column":12},"end":{"line":1040,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"_hasLocalDataProvider","type":"boolean","description":"When true data provider is local, when false external (remote) and\nwhen undefined it defined yet.","privacy":"protected","sourceRange":{"start":{"line":1046,"column":12},"end":{"line":1048,"column":13}},"metadata":{"polymer":{}}},{"name":"defaultColumnWidth","type":"string","description":"Default width for columns. Defaults to `100px` if undefined.\n\nColumn sizes should also be configured using the\n`defaultColumnFlexGrow` and `columns.flexGrow` properties to\nchange how each column sizes itself relative to other columns in\nthe grid.\n\nWhen column flex-grow properties are set to non-zero values,\nthis size behaves as a minimum width for the column.","privacy":"public","sourceRange":{"start":{"line":1061,"column":12},"end":{"line":1064,"column":13}},"metadata":{"polymer":{}},"defaultValue":"\"100px\""},{"name":"defaultColumnFlexGrow","type":"number","description":"Default flex-grow value for columns if none is defined in\n`columns.flexGrow`. Equivalent to the CSS flex-grow property.","privacy":"public","sourceRange":{"start":{"line":1070,"column":12},"end":{"line":1073,"column":13}},"metadata":{"polymer":{}},"defaultValue":"1"},{"name":"_selectedActionItems","type":"Array","description":"","privacy":"protected","sourceRange":{"start":{"line":1075,"column":12},"end":{"line":1078,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"_groupByColumn","type":"Object","description":"","privacy":"protected","sourceRange":{"start":{"line":1080,"column":12},"end":{"line":1083,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"gridHeight","type":"string","description":"Defines the height of grid.\n\n  * Set to `'auto'` if the grid should grow to fit all of its rows\n  * Set to `'default'` or undefined to use the default height\n  * Set to any other valid CSS height valid (e.g. `400px`) to\n    define a static height for the grid area inside the\n    px-data-grid. This height will not include the table action\n    menu and other elements of the grid.\n\nSee the `flexToSize` property for a different strategy that sizes\nthe grid based on its parent element's height.","privacy":"public","sourceRange":{"start":{"line":1098,"column":12},"end":{"line":1102,"column":13}},"metadata":{"polymer":{"observer":"\"_gridHeightChanged\""}}},{"name":"flexToSize","type":"boolean","description":"Set to `true` to instruct the grid to fill its parent element's\nheight and width using flexbox. When enabled the px-data-grid\nelement will fill 100% of the available height of its parent.\nTo constrain the grid's height, set the CSS variable\n`--px-data-grid-height` to a different value.","privacy":"public","sourceRange":{"start":{"line":1111,"column":12},"end":{"line":1115,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"itemIdPath","type":"string","description":"Path to a `tableData` item sub-property that serves as a unique\nidentifier for the item. Should be defined if the grid allows\nuser editing so the grid can pair new versions of each item\nwith the original data.\n\nPath must be unique for each item, must exist for every item,\nand should not be changed or be user editable.","privacy":"public","sourceRange":{"start":{"line":1126,"column":12},"end":{"line":1128,"column":13}},"metadata":{"polymer":{}}},{"name":"offerFilterSaving","type":"boolean","description":"Set to allow users to save filters created in the advanced filter\ndialog. If enabled, the grid will fire `save-filters` events when\nthe user taps the save filter button.","privacy":"public","sourceRange":{"start":{"line":1135,"column":12},"end":{"line":1138,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"allowSortBySelection","type":"boolean","description":"Set to `true` to allow the user to sort by selected items.\nWhen enabled the user can click on the selected item count\nat the top left of the grid to sort by selection.","privacy":"public","sourceRange":{"start":{"line":1145,"column":12},"end":{"line":1148,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"instantSortWhenSelection","type":"boolean","description":"Set to `true` to instantly re-sort all rows when any changes\nare made in multi-selection and sort-by-selection modes.","privacy":"public","sourceRange":{"start":{"line":1154,"column":12},"end":{"line":1157,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"compactAdvancedFilterDialog","type":"boolean","description":"Set to `true` to render the advanced filtering UI modal in space\nsaving mode (e.g. with reuseable headers).","privacy":"public","sourceRange":{"start":{"line":1163,"column":12},"end":{"line":1166,"column":13}},"metadata":{"polymer":{}},"defaultValue":"true"},{"name":"stringComparators","type":"Array","description":"Comparison options shown in the advanced filtering UI for columns\nof type `string`. Valid options are:\n\n  * `'equals'`\n  * `'contains'`\n  * `'starts_with'`\n  * `'ends_with'`\n  * `'wildcard'`\n\nIf this array is undefined or empty, all options will be shown.","privacy":"public","sourceRange":{"start":{"line":1180,"column":12},"end":{"line":1182,"column":13}},"metadata":{"polymer":{}}},{"name":"numberComparators","type":"Array","description":"Comparison options shown in the advanced filtering UI for columns\nof type `number`. Valid options are:\n\n  * `'less_than'`\n  * `'equals'`\n  * `'not_equal'`\n  * `'equal_or_greater_than'`\n  * `'equal_or_less_than'`\n  * `'greater_than'`\n\nIf this array is undefined or empty, all options will be shown.","privacy":"public","sourceRange":{"start":{"line":1197,"column":12},"end":{"line":1199,"column":13}},"metadata":{"polymer":{}}},{"name":"_editingItem","type":"Object","description":"Stores item, that is currently in edit mode.","privacy":"protected","sourceRange":{"start":{"line":1204,"column":12},"end":{"line":1208,"column":13}},"metadata":{"polymer":{"observer":"\"_editingItemObserver\""}},"defaultValue":"null"},{"name":"_editingRenderers","type":"Array","description":"Stores all renderer elements for item, that is currently in edit mode.","privacy":"protected","sourceRange":{"start":{"line":1213,"column":12},"end":{"line":1216,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"_boundedLocalize","type":"Function","description":"","privacy":"protected","sourceRange":{"start":{"line":1218,"column":12},"end":{"line":1218,"column":38}},"metadata":{"polymer":{}}},{"name":"_autoFilterValue","type":"string","description":"","privacy":"protected","sourceRange":{"start":{"line":1220,"column":12},"end":{"line":1222,"column":13}},"metadata":{"polymer":{}}}],"methods":[{"name":"ready","description":"","privacy":"protected","sourceRange":{"start":{"line":1278,"column":8},"end":{"line":1339,"column":9}},"metadata":{},"params":[]},{"name":"_escapeRegExp","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":91,"column":4},"end":{"line":93,"column":5}},"metadata":{},"params":[{"name":"str"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_isStringMatches","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":95,"column":4},"end":{"line":121,"column":5}},"metadata":{},"params":[{"name":"filter"},{"name":"value"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_isDateMatches","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":123,"column":4},"end":{"line":138,"column":5}},"metadata":{},"params":[{"name":"filter"},{"name":"value"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_isNumberMatches","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":140,"column":4},"end":{"line":175,"column":5}},"metadata":{},"params":[{"name":"filter"},{"name":"value"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_matchesFilter","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":177,"column":4},"end":{"line":187,"column":5}},"metadata":{},"params":[{"name":"item"},{"name":"column"},{"name":"entity"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_applyCustomFilter","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":189,"column":4},"end":{"line":238,"column":5}},"metadata":{},"params":[{"name":"items"},{"name":"columns"},{"name":"filters"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_constructHighilightCondition","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":240,"column":4},"end":{"line":263,"column":5}},"metadata":{},"params":[{"name":"appliableFilters"},{"name":"columns"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"_filtersObserver","description":"","privacy":"protected","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":265,"column":4},"end":{"line":304,"column":5}},"metadata":{},"params":[{"name":"filters"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"applyFilters","description":"This method allows to pass filters and save them as default filter state.\nThis means that after clicking \"Reset\" in filters modal filters will return to this state.\nFormat of input parameter for column.type === 'string':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'first[string]',\n       active: true,\n       pattern: 'equals',\n       query: 'Wong'\n    }\n  ]\n}]\n```\nPattern can be one of `['equals', 'contains', 'starts_with', 'ends_with', 'wildcard']`.\n\nFormat for column.type === 'date':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'birth_date[date]',\n       active: true,\n       dateFrom: '1994-11-12',\n       dateTo: '1994-11-12'\n    }\n  ]\n}]\n```\n\nFormat for column.type === 'number':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'age[number]',\n       active: true,\n       condition: 'equals',\n       value: 1\n    }\n  ]\n}]\n```\n\nCondition can be one of `['equals', 'not_equal', 'greater_than', 'less_than', 'equals_or_greater_than', 'equals_or_less_than']`.\nAlso, `leftBound` and `rightBound` properties can be used instead of `condition` and `value` in order to filter by number range.\n\nFormat:\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'age[number]',\n       active: true,\n       leftBound: 1,\n       rightBound: 2\n    }\n  ]\n}]\n```","privacy":"public","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":377,"column":4},"end":{"line":380,"column":5}},"metadata":{},"params":[{"name":"filters"}],"inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"updateColumns","description":"Forces the grid to read each of the `columns` objects and update\neach column based on any changed configurations.\n\nUse this if you mutate your `columns` property in your app and\nwant the data grid to update to reflect the new configurations.","privacy":"public","sourceRange":{"start":{"line":1243,"column":8},"end":{"line":1252,"column":9}},"metadata":{},"params":[]},{"name":"_checkRowDetailsTemplate","description":"","privacy":"protected","sourceRange":{"start":{"line":1261,"column":8},"end":{"line":1276,"column":9}},"metadata":{},"params":[{"name":"nodes"}]},{"name":"_onRowHoverEvent","description":"","privacy":"protected","sourceRange":{"start":{"line":1341,"column":8},"end":{"line":1351,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_onRowUnhoverEvent","description":"","privacy":"protected","sourceRange":{"start":{"line":1353,"column":8},"end":{"line":1357,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_ungroup","description":"","privacy":"protected","sourceRange":{"start":{"line":1359,"column":8},"end":{"line":1363,"column":9}},"metadata":{},"params":[]},{"name":"_resolveLastFrozenColumnIndex","description":"","privacy":"protected","sourceRange":{"start":{"line":1365,"column":8},"end":{"line":1377,"column":9}},"metadata":{},"params":[]},{"name":"_columnSanityCheck","description":"","privacy":"protected","sourceRange":{"start":{"line":1379,"column":8},"end":{"line":1400,"column":9}},"metadata":{},"params":[]},{"name":"_handleColumnFreeze","description":"put frozen column to the beginning (in the place of the first data column)","privacy":"protected","sourceRange":{"start":{"line":1403,"column":8},"end":{"line":1406,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_moveColumnToLeft","description":"","privacy":"protected","sourceRange":{"start":{"line":1408,"column":8},"end":{"line":1437,"column":9}},"metadata":{},"params":[{"name":"column"}]},{"name":"_handleColumnUnfreeze","description":"","privacy":"protected","sourceRange":{"start":{"line":1439,"column":8},"end":{"line":1444,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_doInstantSortAfterSelect","description":"","privacy":"protected","sourceRange":{"start":{"line":1446,"column":8},"end":{"line":1452,"column":9}},"metadata":{},"params":[]},{"name":"_selectedItemsChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":1454,"column":8},"end":{"line":1459,"column":9}},"metadata":{},"params":[{"name":"selectedItems"}]},{"name":"_groupByColumnAllowed","description":"","privacy":"protected","sourceRange":{"start":{"line":1461,"column":8},"end":{"line":1463,"column":9}},"metadata":{},"params":[{"name":"hasLocalDataProvider"},{"name":"expandableRows"}]},{"name":"_handleSelectItem","description":"Trick to prevent multiselection when in single select mode","privacy":"protected","sourceRange":{"start":{"line":1468,"column":8},"end":{"line":1475,"column":9}},"metadata":{},"params":[{"name":"item"}]},{"name":"_getValue","description":"","privacy":"protected","sourceRange":{"start":{"line":1477,"column":8},"end":{"line":1483,"column":9}},"metadata":{},"params":[{"name":"column"},{"name":"item"}]},{"name":"_getColumnWidth","description":"","privacy":"protected","sourceRange":{"start":{"line":1485,"column":8},"end":{"line":1487,"column":9}},"metadata":{},"params":[{"name":"column"}]},{"name":"_getColumnFlexGrow","description":"","privacy":"protected","sourceRange":{"start":{"line":1489,"column":8},"end":{"line":1491,"column":9}},"metadata":{},"params":[{"name":"column"}]},{"name":"_resolveCellColor","description":"","privacy":"protected","sourceRange":{"start":{"line":1493,"column":8},"end":{"line":1533,"column":9}},"metadata":{},"params":[{"name":"item"},{"name":"column"}]},{"name":"_isRowConditionApplied","description":"","privacy":"protected","sourceRange":{"start":{"line":1535,"column":8},"end":{"line":1540,"column":9}},"metadata":{},"params":[{"name":"item"},{"name":"condition"}]},{"name":"_isColumnConditionApplied","description":"","privacy":"protected","sourceRange":{"start":{"line":1542,"column":8},"end":{"line":1549,"column":9}},"metadata":{},"params":[{"name":"column"},{"name":"condition"}]},{"name":"_tableDataChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":1551,"column":8},"end":{"line":1566,"column":9}},"metadata":{},"params":[{"name":"tableData"},{"name":"splices"},{"name":"isAttached"}]},{"name":"_compareValues","description":"","privacy":"protected","sourceRange":{"start":{"line":1568,"column":8},"end":{"line":1590,"column":9}},"metadata":{},"params":[{"name":"a"},{"name":"b"},{"name":"path"},{"name":"direction"}]},{"name":"_compareMomentObj","description":"","privacy":"protected","sourceRange":{"start":{"line":1592,"column":8},"end":{"line":1605,"column":9}},"metadata":{},"params":[{"name":"momentA"},{"name":"momentB"},{"name":"direction"}]},{"name":"_getMomentObj","description":"","privacy":"protected","sourceRange":{"start":{"line":1607,"column":8},"end":{"line":1619,"column":9}},"metadata":{},"params":[{"name":"value"},{"name":"path"}]},{"name":"_getColumnByPath","description":"","privacy":"protected","sourceRange":{"start":{"line":1621,"column":8},"end":{"line":1626,"column":9}},"metadata":{},"params":[{"name":"columnPath"}]},{"name":"_localDataResolver","description":"Do not drop item for page sizing here, or it will break things","privacy":"protected","sourceRange":{"start":{"line":1631,"column":8},"end":{"line":1667,"column":9}},"metadata":{},"params":[{"name":"params"},{"name":"items"}]},{"name":"_gridGetItemId","description":"Overridden version of vaadin-grid getItemId, to allow grouping\nAlways use instance compare in case of hasChildren","privacy":"protected","sourceRange":{"start":{"line":1673,"column":8},"end":{"line":1679,"column":9}},"metadata":{},"params":[{"name":"item"}]},{"name":"_localDataProvider","description":"","privacy":"protected","sourceRange":{"start":{"line":1681,"column":8},"end":{"line":1717,"column":9}},"metadata":{},"params":[{"name":"params"},{"name":"callback"}]},{"name":"_getAllLocalItems","description":"Will return all local items after filter (no ordering applied)","privacy":"protected","sourceRange":{"start":{"line":1722,"column":8},"end":{"line":1732,"column":9}},"metadata":{},"params":[]},{"name":"_remoteDataProviderChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":1734,"column":8},"end":{"line":1742,"column":9}},"metadata":{},"params":[{"name":"provider"}]},{"name":"_resolveColumnPath","description":"","privacy":"protected","sourceRange":{"start":{"line":1744,"column":8},"end":{"line":1749,"column":9}},"metadata":{},"params":[{"name":"column"}]},{"name":"_populateTableColumns","description":"","privacy":"protected","sourceRange":{"start":{"line":1751,"column":8},"end":{"line":1768,"column":9}},"metadata":{},"params":[{"name":"data"}]},{"name":"_actionClicked","description":"Event handler for action menu clicks","privacy":"protected","sourceRange":{"start":{"line":1773,"column":8},"end":{"line":1800,"column":9}},"metadata":{},"params":[{"name":"evt"}]},{"name":"_getColumns","description":"Function to resolve (data) columns on grid","privacy":"protected","sourceRange":{"start":{"line":1805,"column":8},"end":{"line":1807,"column":9}},"metadata":{},"params":[]},{"name":"_updateActionMenu","description":"Function called when action menu content needs to be updated","privacy":"protected","sourceRange":{"start":{"line":1812,"column":8},"end":{"line":1878,"column":9}},"metadata":{},"params":[]},{"name":"_getColumnsWithName","description":"","privacy":"protected","sourceRange":{"start":{"line":1880,"column":8},"end":{"line":1882,"column":9}},"metadata":{},"params":[{"name":"name"}]},{"name":"_getColumnById","description":"","privacy":"protected","sourceRange":{"start":{"line":1884,"column":8},"end":{"line":1886,"column":9}},"metadata":{},"params":[{"name":"columnId"}]},{"name":"_getColumnElementById","description":"","privacy":"protected","sourceRange":{"start":{"line":1888,"column":8},"end":{"line":1891,"column":9}},"metadata":{},"params":[{"name":"columnId"}]},{"name":"_scheduleColumnSanityCheck","description":"","privacy":"protected","sourceRange":{"start":{"line":1893,"column":8},"end":{"line":1901,"column":9}},"metadata":{},"params":[]},{"name":"_onColumnUpdate","description":"","privacy":"protected","sourceRange":{"start":{"line":1903,"column":8},"end":{"line":1909,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_loadingChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":1911,"column":8},"end":{"line":1919,"column":9}},"metadata":{},"params":[{"name":"loading"}]},{"name":"_showActionBar","description":"Simple method to check if action bar should be shown","privacy":"protected","sourceRange":{"start":{"line":1924,"column":8},"end":{"line":1926,"column":9}},"metadata":{},"params":[{"name":"filterField"},{"name":"hideActionMenu"},{"name":"filterable"}]},{"name":"resolveColumnHeader","description":"Helper method to check if header is defined, if not use name","privacy":"public","sourceRange":{"start":{"line":1931,"column":8},"end":{"line":1933,"column":9}},"metadata":{},"params":[{"name":"column"}]},{"name":"_applyAutoFilter","description":"This to be moved to inner data-provider when we get that done. Until then\nthis will add workaround that allows to filter inmemory data given via\nitems parameter.","privacy":"protected","sourceRange":{"start":{"line":1940,"column":8},"end":{"line":1958,"column":9}},"metadata":{},"params":[{"name":"items"},{"name":"filters"}]},{"name":"_autoFilterChanged","description":"Listener for auto filter component","privacy":"protected","sourceRange":{"start":{"line":1963,"column":8},"end":{"line":1981,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_isGroupedByColumn","description":"","privacy":"protected","sourceRange":{"start":{"line":1983,"column":8},"end":{"line":1985,"column":9}},"metadata":{},"params":[{"name":"column"},{"name":"_groupByColumn"}]},{"name":"_columnOrderCleaner","description":"Method forcing column order rules. To be run after any column order change","privacy":"protected","sourceRange":{"start":{"line":1990,"column":8},"end":{"line":2001,"column":9}},"metadata":{},"params":[]},{"name":"_isSelectable","description":"Check if selections are allowed","privacy":"protected","sourceRange":{"start":{"line":2006,"column":8},"end":{"line":2008,"column":9}},"metadata":{},"params":[]},{"name":"_isMultiSelect","description":"Check if grid is in multi selection mode","privacy":"protected","sourceRange":{"start":{"line":2013,"column":8},"end":{"line":2015,"column":9}},"metadata":{},"params":[]},{"name":"_selectionModeChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":2017,"column":8},"end":{"line":2044,"column":9}},"metadata":{},"params":[{"name":"mode"}]},{"name":"_highlightsObserver","description":"","privacy":"protected","sourceRange":{"start":{"line":2046,"column":8},"end":{"line":2048,"column":9}},"metadata":{},"params":[{"name":"highlight"},{"name":"filterHighlights"}]},{"name":"_gridHeightChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":2050,"column":8},"end":{"line":2065,"column":9}},"metadata":{},"params":[{"name":"gridHeight"}]},{"name":"setRowDetailsVisible","description":"Set visibility of the details container for any item's corresponding row.","privacy":"public","sourceRange":{"start":{"line":2070,"column":8},"end":{"line":2082,"column":9}},"metadata":{},"params":[{"name":"item"},{"name":"isVisible"}]},{"name":"_editingItemObserver","description":"","privacy":"protected","sourceRange":{"start":{"line":2084,"column":8},"end":{"line":2096,"column":9}},"metadata":{},"params":[{"name":"editingItem"},{"name":"oldV"}]},{"name":"_setEditingItem","description":"","privacy":"protected","sourceRange":{"start":{"line":2098,"column":8},"end":{"line":2105,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_cancelEdit","description":"","privacy":"protected","sourceRange":{"start":{"line":2107,"column":8},"end":{"line":2112,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_isItemEditing","description":"","privacy":"protected","sourceRange":{"start":{"line":2114,"column":8},"end":{"line":2116,"column":9}},"metadata":{},"params":[{"name":"item"},{"name":"editingItem"}]},{"name":"_isAnyItemEditing","description":"","privacy":"protected","sourceRange":{"start":{"line":2118,"column":8},"end":{"line":2120,"column":9}},"metadata":{},"params":[{"name":"editingItem"}]},{"name":"_saveItem","description":"","privacy":"protected","sourceRange":{"start":{"line":2122,"column":8},"end":{"line":2145,"column":9}},"metadata":{},"params":[]},{"name":"_localizeChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":2147,"column":8},"end":{"line":2149,"column":9}},"metadata":{},"params":[{"name":"localize"}]},{"name":"_scrollListener","description":"","privacy":"protected","sourceRange":{"start":{"line":2151,"column":8},"end":{"line":2157,"column":9}},"metadata":{},"params":[{"name":"e"}]},{"name":"_onPxSorterChanged","description":"Overridden version of _onSorterChanged in vaadin-grid-sort-mixin. Is mapped to custom event\npx-sorter-changed emitted by px-data-grid-sorter. Only difference is to use push, not\nunshift, when adding sort rule to _sorters. If errors in this method, update to match with\ncurrent version in vaadin-grid-sort-mixin, and replace unshift with push.","privacy":"protected","sourceRange":{"start":{"line":2165,"column":8},"end":{"line":2202,"column":9}},"metadata":{},"params":[{"name":"e"}]},{"name":"getVisibleColumns","description":"Returns a list of currently visible columns in the grid.","privacy":"public","sourceRange":{"start":{"line":2209,"column":8},"end":{"line":2211,"column":9}},"metadata":{},"params":[],"return":{"type":"Array.<Object>","desc":"Array of references to `columns` objects"}},{"name":"getData","description":"Returns currently visible data if called with `true`.\nReturns all cached data if called with `undefined`.","privacy":"public","sourceRange":{"start":{"line":2220,"column":8},"end":{"line":2255,"column":9}},"metadata":{},"params":[{"name":"visibleOnly","type":"?boolean"}],"return":{"desc":"Array"}},{"name":"_cleanColumns","description":"Make JSON friendly version out of columns array","privacy":"protected","sourceRange":{"start":{"line":2260,"column":8},"end":{"line":2265,"column":9}},"metadata":{},"params":[{"name":"columns"}]},{"name":"_columnsChanged","description":"Columns property change observer","privacy":"protected","sourceRange":{"start":{"line":2270,"column":8},"end":{"line":2274,"column":9}},"metadata":{},"params":[{"name":"columns"}]},{"name":"_setColumnId","description":"","privacy":"protected","sourceRange":{"start":{"line":2276,"column":8},"end":{"line":2293,"column":9}},"metadata":{},"params":[{"name":"columns"}]},{"name":"restoreLayout","description":"Restore layout (columns) to state those were given","privacy":"public","sourceRange":{"start":{"line":2298,"column":8},"end":{"line":2306,"column":9}},"metadata":{},"params":[]},{"name":"_revertColumns","description":"","privacy":"protected","sourceRange":{"start":{"line":2308,"column":8},"end":{"line":2314,"column":9}},"metadata":{},"params":[{"name":"revertTo"}]},{"name":"_undefinedToFalse","description":"Just to make sure only true or false is given (undefined converted to false).\nIn some cases undefined value breaks functionality,","privacy":"protected","sourceRange":{"start":{"line":2320,"column":8},"end":{"line":2326,"column":9}},"metadata":{},"params":[{"name":"value"}]},{"name":"_copyArray","description":"","privacy":"protected","sourceRange":{"start":{"line":2328,"column":8},"end":{"line":2330,"column":9}},"metadata":{},"params":[{"name":"arr"}]},{"name":"_isAutoHeight","description":"","privacy":"protected","sourceRange":{"start":{"line":2332,"column":8},"end":{"line":2334,"column":9}},"metadata":{},"params":[{"name":"gridHeight"}]},{"name":"_checkColumnResizable","description":"","privacy":"protected","sourceRange":{"start":{"line":2336,"column":8},"end":{"line":2338,"column":9}},"metadata":{},"params":[{"name":"gridResizable"},{"name":"columnResizable"}]},{"name":"_isStriped","description":"","privacy":"protected","sourceRange":{"start":{"line":2340,"column":8},"end":{"line":2342,"column":9}},"metadata":{},"params":[{"name":"striped"},{"name":"groupByColumn"}]},{"name":"_ellipsisModeChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":2344,"column":8},"end":{"line":2353,"column":9}},"metadata":{},"params":[{"name":"ellipsisMode"}]},{"name":"_compare","description":"Rewrite of _compare from vaadin-grid to allow incasesensitive compare","privacy":"protected","sourceRange":{"start":{"line":2358,"column":8},"end":{"line":2377,"column":9}},"metadata":{},"params":[{"name":"a"},{"name":"b"}]},{"name":"_offerEditColumn","description":"","privacy":"protected","sourceRange":{"start":{"line":2379,"column":8},"end":{"line":2381,"column":9}},"metadata":{},"params":[{"name":"editable"}]},{"name":"_offerActionColumn","description":"","privacy":"protected","sourceRange":{"start":{"line":2383,"column":8},"end":{"line":2386,"column":9}},"metadata":{},"params":[{"name":"editable"},{"name":"itemActions"},{"name":"editingItem"}]},{"name":"_isColumnReorderingAllowed","description":"","privacy":"protected","sourceRange":{"start":{"line":2388,"column":8},"end":{"line":2390,"column":9}},"metadata":{},"params":[{"name":"columnReordingAllowed"},{"name":"groupByColumn"}]},{"name":"_openAdvancedFilter","description":"","privacy":"protected","sourceRange":{"start":{"line":2392,"column":8},"end":{"line":2394,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"getState","description":"Gets the current configurations set by the user on the data grid,\nincluding a list of visible columns, a list of highlight rules,\na list of filters, and the current auto filter search value.\n\nSave the result to some persistant storage (e.g. your app database or\nlocalStorage) to save the user's preferences after they configure\nthe data grid. When the user revisits the grid page, fetch the\nsaved state and call `setState()` to set the grid up with the\nsame set of preferences.","privacy":"public","sourceRange":{"start":{"line":2409,"column":8},"end":{"line":2416,"column":9}},"metadata":{},"params":[],"return":{"type":"Object"}},{"name":"setState","description":"Sets the state of the grid based on a past state created by\ncalling `getState()`.\n\nConfigures the visible columns, highlight rules, active filters,\nand auto-filter value.","privacy":"public","sourceRange":{"start":{"line":2427,"column":8},"end":{"line":2437,"column":9}},"metadata":{},"params":[{"name":"state","type":"Object","description":"State object created by `getState()`"}]}],"staticMethods":[],"demos":[],"metadata":{},"sourceRange":{"start":{"line":218,"column":6},"end":{"line":2438,"column":7}},"privacy":"public","superclass":"HTMLElement","name":"DataGridElement","attributes":[{"name":"filterable","description":"Set to enable advanced filtering. When enabled, a filter\nbutton will be shown at the top of the grid. When the user clicks\non the filter button, a modal will be shown and the user can\nfilter visible items using different UI patterns.\n\nColumns should have the right `columns.type` set to ensure the\nadvanced filtering works as expected. See the `columns` property\nfor more information on setting the type, and for more advanced\nfiltering options that can be customized for `number` and `date`\ntype columns.","sourceRange":{"file":"px-data-grid-filterable-mixin.html","start":{"line":38,"column":8},"end":{"line":41,"column":9}},"metadata":{},"type":"boolean","inheritedFrom":"Predix.DataGridFilterableMixin"},{"name":"table-data","description":"Data for the table to display.\n\nPass an array of objects. Each object will be rendered as a row\nin the grid. The objects should share many of the same keys.\nEach key will be used to group data into columns.\n\nUse the `columns` property to control which keys are displayed\nto the user and which are not, and to control how the grid\nhandles the data for each column. By default if no `columns` are\ndefined the grid will automatically create columns from all of\nthe keys found in the first object.\n\nExample data:\n\n```\n[\n  {\n    first: 'Elizabeth',\n    last: 'Wong',\n    email: 'sika@iknulber.cl'\n  },\n  {\n    first: 'Jeffrey',\n    last: 'Hamilton',\n    email: 'cofok@rac.be'\n  },\n  {\n    first: 'Alma',\n    last: 'Martin',\n    email: 'dotta@behtam.la'\n  }\n]\n```","sourceRange":{"start":{"line":263,"column":12},"end":{"line":266,"column":13}},"metadata":{},"type":"Array"},{"name":"hide-selection-column","description":"Set to hide the selection checkbox for each row.\n\nBy default, if the `selectionMode` property is set to `'single'`\nor `'multi'` the grid shows a checkbox/radio button the user\ncan click to select or deselect a row. When this property is\nenabled, the checkbox is hidden and the user can click directly\non row contents to select or deselect a row.","sourceRange":{"start":{"line":277,"column":12},"end":{"line":280,"column":13}},"metadata":{},"type":"boolean"},{"name":"selected-items","description":"Array of selected items. Automatically updated by the grid when\nthe user selects items. Each item will be a reference to the\n`tableData` item that was passed to render the row.\n\nAdd references to `tableData` items to programmatically select\nitems from your application.","sourceRange":{"start":{"line":290,"column":12},"end":{"line":294,"column":13}},"metadata":{},"type":"Array"},{"name":"size","description":"The total number of items","sourceRange":{"start":{"line":300,"column":12},"end":{"line":303,"column":13}},"metadata":{},"type":"number"},{"name":"page-size","description":"The number of items fetched during each request to the\n`remoteDataProvider`. See the `remoteDataProvider` property\nfor more information.","sourceRange":{"start":{"line":310,"column":12},"end":{"line":313,"column":13}},"metadata":{},"type":"number"},{"name":"multi-sort","description":"Set to `true` to allow the user to sort by multiple columns at\nthe same time.","sourceRange":{"start":{"line":319,"column":12},"end":{"line":322,"column":13}},"metadata":{},"type":"boolean"},{"name":"selection-mode","description":"Sets the current selection mode for the grid. Valid modes are:\n\n  * `'none'` - User can't select any rows\n  * `'single'` - User can select one row at a time\n  * `'multi'` - User can select multiple rows at the same time","sourceRange":{"start":{"line":331,"column":12},"end":{"line":335,"column":13}},"metadata":{},"type":"string"},{"name":"active-item","description":"The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.","sourceRange":{"start":{"line":342,"column":12},"end":{"line":346,"column":13}},"metadata":{},"type":"Object"},{"name":"resizable","description":"Set to `true` to allow the user to resize columns.","sourceRange":{"start":{"line":351,"column":12},"end":{"line":354,"column":13}},"metadata":{},"type":"boolean"},{"name":"editable","description":"Set to allow users to edit data in the grid. You must also\nexplicitly set the `columns.editable` property to true for each\ncolumn the user can edit in the grid.\n\nWhen the user starts or stops editing a row the\n`editing-item-changed` event will be fired. `event.detail.item`\nwill contain a reference to the row being edited.\n\nAfter a user finishes editing a row the `item-edited` event\nwill be fired. `event.detail` will contain information about\nwhat the user changed.","sourceRange":{"start":{"line":369,"column":12},"end":{"line":372,"column":13}},"metadata":{},"type":"boolean"},{"name":"column-reordering-allowed","description":"Set to `true` to allow the user to re-order columns by dragging\nand dropping them. Can't be combined with some other states like\ngroup-by-value.","sourceRange":{"start":{"line":379,"column":12},"end":{"line":382,"column":13}},"metadata":{},"type":"boolean"},{"name":"expanded-items","description":"An array containing references to the expanded rows.\n\nAutomatically updated by the grid in the following cases:\n\n  * When a `row-details` template is provided to create expandable\n    rows the grid will add rows to this list when they are\n    expanded by the user, and remove rows when they are collapsed\n    by the user.\n  * When the user groups rows by column the grid will add rows\n    that the user expands and remove rows the user collapses.\n\nSet this value to references to rows to expand or collapse\nthe rows programmatically.","sourceRange":{"start":{"line":399,"column":12},"end":{"line":403,"column":13}},"metadata":{},"type":"Array"},{"name":"hide-action-menu","description":"Set to hide the action menu button displayed at the top right of\nthe grid.\n\nIf the action menu is hidden, the user will not be able to unhide\nany hidden columns.","sourceRange":{"start":{"line":437,"column":12},"end":{"line":440,"column":13}},"metadata":{},"type":"boolean"},{"name":"columns","description":"Defines the columns the grid should render. If no columns are\npassed, the grid generates columns from the `tableData` passed\nin. Columns are rendered in the same order as the array.\n\n## `column` options\n\nThe following options are available for all column types. Only\n`name` and `path` are required, all others are optional:\n\n  * `{string} name` - Human-readable name displayed in the column\n    header\n\n  * `{string} path` - Key used to get the column data from each\n    of the `tableData` objects\n\n  * `{string} id='column.path[column.type]'` - Unique identifier\n    of the column. By default, px-data-grid will automatically\n    generate it from `column.path` and `column.type`. There can't\n    be 2 columns with the same id. The value `-any-` is a\n    reserved keyword that you cannot use for any column `id`.\n\n  * `{string} type=('string'|'number'|'date')` - Type of data\n    in the column. Used in the advanced filter UI to show\n    different filter options for each data type. Does not change\n    the renderer or impact sorting.\n\n  * `{string} renderer` - The name of the web component used to\n    render each cell in the column. There are three built-in\n    renderers available: `'px-data-grid-string-renderer'` (the\n    default renderer), `'px-data-grid-number-renderer'`, and\n    `'px-data-grid-date-renderer'`. You can also create a custom\n    renderer and use its name here. If no renderer is specified,\n    the column cannot be edited by the user.\n\n  * `{object} rendererConfig` - Settings to pass to the renderer\n    that change how data is displayed to the user. See the\n    examples below for information on which options are available\n    for each built-in renderer.\n\nThe following options are available for columns of type `date`:\n\n  * `{array} dateRanges` - List of pre-defined date ranges that\n    will appear in advanced filter dropdown for this column.\n    See the examples below for examples on how to format\n    each date range.\n\nThe following options are available for columns of type `number`:\n\n  * `{number} minBound` - Defines a minimum bound of a number in\n    the advanced filter field for this column. If both minBound\n    and maxBound properties are defined, the advanced filter will\n    display a slider instead of a condition dropdown.\n\n  * `{number} maxBound` - Defines a maximum bound of a number in\n    the advanced filter field for this column.\n\n  * `{boolean} hidden=false` - Hides the column from the user\n    when the grid is rendered. Automatically updated when the\n    user shows/hides columns using action menu(s).\n\n  * `{boolean} frozen=false` - Freezes the column. When the user\n    scrolls the grid horizontally frozen columns will not move.\n    Automatically updated when the user freezes/unfreezes columns\n    using action menu(s).\n\n  * `{boolean} required=false` - Used in renderers during editing.\n    If the column is required, the user will not be allowed to\n    enter a blank value.\n\n  * `{number} flexGrow=1` - Sets the relative size of the column\n    compared to other columns in the grid. Equivalent to the CSS\n    `flex-grow` property.\n\n\n## `column.dateFormat` options\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `date`. All formats should be set to a valid\n[moment.js format string](https://momentjs.com/docs/#/parsing/string-format/)\nor to 'ISO':\n\n  * `{string} dateFormat.format='YYYY-MM-DD HH:mm:ss'` -\n    Format used to read the date/timestamp data.\n\n  * `{string} dateFormat.timezone='UTC'` -\n    Timezone used to read the date/timestamp data.\n\n\n## `column.rendererConfig` options\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `date`. All formats should be set to a valid\n[moment.js format string](https://momentjs.com/docs/#/parsing/string-format/)\nor to 'ISO':\n\n  * `{string} rendererConfig.displayFormat='YYYY-MM-DD HH:mm:ss'` -\n    Format used to display the date/timestamp for the user.\n\n  * `{string} rendererConfig.timezone='UTC'` -\n    Timezone used to display the date/timestamp for the user.\n\n  * `{string} rendererConfig.datePickerDateFormat='YYYY-MM-DD'` -\n    Format used for the px-datetime-picker date when the user\n    edits cells in the column.\n\n  * `{string} rendererConfig.datePickerTimeFormat='HH:MM:SS'` -\n    Format used for the px-datetime-picker time when the user\n    edits cells in the column.\n\n  * `{boolean} rendererConfig.hideDate=false` - Hides the date\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\n  * `{boolean} rendererConfig.hideTime=true` - Hides the time\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `number`:\n\n  * `{?string} rendererConfig.displayFormat=null` - Format used to\n    display numbers in this column. Set to a valid\n    [numbro.js format string](http://numbrojs.com/format.html).\n    Set to `null` to display the number exactly as it appears\n    in the `tableData` by coercing it to string.\n\n  * `{string} rendererConfig.displayCulture='en-US'` - Changes the\n    way numbers in this column are displayed to the user by\n    localizing to get the correct format for commas, decimals,\n    etc. See [numbro.js languages](http://numbrojs.com/languages.html)\n    for a list of valid options.\n\n  * `{boolean} rendererConfig.displayIsCurrency=false` - Set to\n    `true` if the data in this column should be formatted as\n    currency. Will use `rendererConfig.displayFormat` to figure\n    out how to display the currency, or fall back to a localized\n    default based on `rendererConfig.displayCulture`.\n\n  * `{string} displayZeroFormat` - Used to format numbers equal\n    to `0` in this column. See [numbro.js docs](http://numbrojs.com/format.html)\n    for a list of valid options.\n\n## Examples\n\nExample format for a single column with all configurations used:\n\n```javascript\n{\n  id: 'first[string]',\n  name: 'First Name',\n  path: 'first',\n  type: 'string',\n  renderer: 'px-data-grid-string-renderer',\n  rendererConfig: {\n    customInfo: 'some info',\n    customInfo2: 42\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ],\n  minBound: 1,\n  maxBound: 10,\n  hidden: false,\n  frozen: false,\n  required: false,\n  flexGrow: 1\n}\n```\n\nExample format for column of type `date` with custom `dateRanges`:\n\n```javascript\n{\n  name: 'Birth date',\n  path: 'birth_date',\n  type: 'date',\n  editable: true,\n  renderer: 'px-data-grid-date-renderer',\n  dateFormat: {\n    format: 'YYYY-MM-DD HH:mm:ss',\n    timezone: 'UTC'\n  },\n  rendererConfig: {\n    displayFormat: 'MM/DD/YYYY HH:mm',\n    timezone: 'America/Los_Angeles',\n    datePickerDateFormat: 'MM/DD/YYYY',\n    datePickerTimeFormat: 'HH:mm'\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last 14 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(14, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'This month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(31, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').subtract(1, 'M').format(),\n          dateFrom: window.moment().tz('UTC').subtract(2, 'M').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ]\n}\n```","sourceRange":{"start":{"line":699,"column":12},"end":{"line":703,"column":13}},"metadata":{},"type":"Array"},{"name":"language","description":"A valid IETF language tag as a string that `app-localize-behavior`\nwill use to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for\nAPI documentation and more information.","sourceRange":{"start":{"line":727,"column":12},"end":{"line":730,"column":13}},"metadata":{},"type":"string"},{"name":"use-key-if-missing","description":"Use the key for localization if value for that language is missing.\nShould always be true for Predix components.","sourceRange":{"start":{"line":736,"column":12},"end":{"line":739,"column":13}},"metadata":{},"type":"boolean"},{"name":"resources","description":"Library object of hardcoded strings used in this application.\nUsed by `app-localize-behavior` in conjunction with `language`.","sourceRange":{"start":{"line":745,"column":12},"end":{"line":769,"column":13}},"metadata":{},"type":"Object"},{"name":"table-actions","description":"A list of custom actions that are shown when the user taps the\naction menu button at the top right of the grid. If the\n`hideActionMenu` property is enabled the action menu won't be\nshown to the user.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Export CSV\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`table-action` event. `event.detail.id` will be the action ID.\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Export CSV',\n    id: 'CSV'\n  }\n  {\n    name: 'Export Excel',\n    id: 'Excel'\n  }\n]\n```","sourceRange":{"start":{"line":802,"column":12},"end":{"line":805,"column":13}},"metadata":{},"type":"Array"},{"name":"item-actions","description":"A list of custom actions that are shown in the actions menu\nfor each data row. The action menu button appears to the right\nof each row when the user hovers over the row.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Add Row After\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`item-action` event. `event.detail.id` will be the action ID and\n`event.detail.item` will be a reference to the row the user\ntook action on (from `tableData`).\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Add Row After',\n    id: 'add-after'\n  }\n  {\n    name: 'Delete Row',\n    id: 'delete'\n  }\n]\n```","sourceRange":{"start":{"line":839,"column":12},"end":{"line":842,"column":13}},"metadata":{},"type":"Array"},{"name":"remote-data-provider","description":"Function that provides items lazily. Receives arguments `params`, `callback`:\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders\n\n`params.parentItem` When expandable table is used, and sublevel items\nare requested, reference to parent item of the requested sublevel.\nOtherwise `undefined`.\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items.\n\n`<px-data-grid>` calls this function lazily, only when it needs more data\nto be displayed.\n\n__Also, note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(\n      response.employees, // requested page of items\n      response.totalSize  // total number of items\n    );\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```\n\n__Alternatively, you can use the `size` property to set the total number of items:__\n\n```javascript\npxDataGrid.size = 200; // The total number of items\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(response.employees);\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```","sourceRange":{"start":{"line":906,"column":12},"end":{"line":909,"column":13}},"metadata":{},"type":"Function"},{"name":"striped","description":"Set to add a background color to every other row in the grid.\nCan make it easier for users to scan across long rows. Striping\nis disabled in group-by-column mode.","sourceRange":{"start":{"line":929,"column":12},"end":{"line":932,"column":13}},"metadata":{},"type":"boolean"},{"name":"ellipsis","description":"Set to show an ellipsis and truncate text for columns where the\ntext doesn't fit in the column.\n\nDo not enable wrap mode while ellipsis mode is enabled.","sourceRange":{"start":{"line":940,"column":12},"end":{"line":944,"column":13}},"metadata":{},"type":"boolean"},{"name":"loading-spinner-debounce","description":"Number of milliseconds to wait before showing the loading spinner\nwhen requesting new data from the `remoteDataProvider`.","sourceRange":{"start":{"line":964,"column":12},"end":{"line":967,"column":13}},"metadata":{},"type":"number"},{"name":"auto-filter","description":"Set to `true` to enable simple filtering. When enabled, a search\nbox will be shown at the top of the grid. The user can type\nin the search box to hide rows that don't include the stringified\nvalue they're looking for. The grid will search all columns and\ntreat all column types as strings for matching purposes.\n\nSee `filterable` property for a more advanced filter option.","sourceRange":{"start":{"line":978,"column":12},"end":{"line":981,"column":13}},"metadata":{},"type":"boolean"},{"name":"highlight","description":"List of rules used to highligh specific columns, rows, or cells.\n\nPass an array of objects. Each object should have the following\nproperties:\n\n  * `{string} type` - If the highlight condition returns `true`,\n    the type determines what the grid will highlight. Set to\n    `'cell'` to highlight only the cell that passed the highlight\n    rule, `'row'` to highlight the row that holds the matching\n    cell, or `'column'` to highlight the column that holds the\n    matching cell.\n  * `{Function} condition` - Function that will be called by the\n    grid for each cell. If the function returns `true`, the\n    highlight rule will be triggered. If the function returns a\n    falsey value, the highlight rule will not be used. The function\n    will be passed three arguments: `cellContent` containing\n    the text of the cell, `column` containing a reference to the\n    `columns` object for the cell's column, and `item` as a reference\n    to the `tableData` item used to create the cell's row.\n  * `{string} color` - A valid CSS color (e.g. hex code or color\n    name). If the highlight condition returns `true`, the color\n    will be used to set the background color of the matching\n    cell, column, or row.\n\nExample highlight rules:\n\n```javascript\n[\n  {\n    type: 'cell',\n    condition: (cellContent, column, item) => { return cellContent == 'John Doe' },\n  },\n  {\n    type: 'row',\n    condition: (cellContent, item) => { return cellContent[0] == 'a' },\n    color: '#a8a8a8'\n  },\n  {\n    type: 'column',\n    condition (column, item) => { return column.name == 'age' },\n    color: 'pink'\n  }\n]\n```","sourceRange":{"start":{"line":1029,"column":12},"end":{"line":1032,"column":13}},"metadata":{},"type":"Array"},{"name":"default-column-width","description":"Default width for columns. Defaults to `100px` if undefined.\n\nColumn sizes should also be configured using the\n`defaultColumnFlexGrow` and `columns.flexGrow` properties to\nchange how each column sizes itself relative to other columns in\nthe grid.\n\nWhen column flex-grow properties are set to non-zero values,\nthis size behaves as a minimum width for the column.","sourceRange":{"start":{"line":1061,"column":12},"end":{"line":1064,"column":13}},"metadata":{},"type":"string"},{"name":"default-column-flex-grow","description":"Default flex-grow value for columns if none is defined in\n`columns.flexGrow`. Equivalent to the CSS flex-grow property.","sourceRange":{"start":{"line":1070,"column":12},"end":{"line":1073,"column":13}},"metadata":{},"type":"number"},{"name":"grid-height","description":"Defines the height of grid.\n\n  * Set to `'auto'` if the grid should grow to fit all of its rows\n  * Set to `'default'` or undefined to use the default height\n  * Set to any other valid CSS height valid (e.g. `400px`) to\n    define a static height for the grid area inside the\n    px-data-grid. This height will not include the table action\n    menu and other elements of the grid.\n\nSee the `flexToSize` property for a different strategy that sizes\nthe grid based on its parent element's height.","sourceRange":{"start":{"line":1098,"column":12},"end":{"line":1102,"column":13}},"metadata":{},"type":"string"},{"name":"flex-to-size","description":"Set to `true` to instruct the grid to fill its parent element's\nheight and width using flexbox. When enabled the px-data-grid\nelement will fill 100% of the available height of its parent.\nTo constrain the grid's height, set the CSS variable\n`--px-data-grid-height` to a different value.","sourceRange":{"start":{"line":1111,"column":12},"end":{"line":1115,"column":13}},"metadata":{},"type":"boolean"},{"name":"item-id-path","description":"Path to a `tableData` item sub-property that serves as a unique\nidentifier for the item. Should be defined if the grid allows\nuser editing so the grid can pair new versions of each item\nwith the original data.\n\nPath must be unique for each item, must exist for every item,\nand should not be changed or be user editable.","sourceRange":{"start":{"line":1126,"column":12},"end":{"line":1128,"column":13}},"metadata":{},"type":"string"},{"name":"offer-filter-saving","description":"Set to allow users to save filters created in the advanced filter\ndialog. If enabled, the grid will fire `save-filters` events when\nthe user taps the save filter button.","sourceRange":{"start":{"line":1135,"column":12},"end":{"line":1138,"column":13}},"metadata":{},"type":"boolean"},{"name":"allow-sort-by-selection","description":"Set to `true` to allow the user to sort by selected items.\nWhen enabled the user can click on the selected item count\nat the top left of the grid to sort by selection.","sourceRange":{"start":{"line":1145,"column":12},"end":{"line":1148,"column":13}},"metadata":{},"type":"boolean"},{"name":"instant-sort-when-selection","description":"Set to `true` to instantly re-sort all rows when any changes\nare made in multi-selection and sort-by-selection modes.","sourceRange":{"start":{"line":1154,"column":12},"end":{"line":1157,"column":13}},"metadata":{},"type":"boolean"},{"name":"compact-advanced-filter-dialog","description":"Set to `true` to render the advanced filtering UI modal in space\nsaving mode (e.g. with reuseable headers).","sourceRange":{"start":{"line":1163,"column":12},"end":{"line":1166,"column":13}},"metadata":{},"type":"boolean"},{"name":"string-comparators","description":"Comparison options shown in the advanced filtering UI for columns\nof type `string`. Valid options are:\n\n  * `'equals'`\n  * `'contains'`\n  * `'starts_with'`\n  * `'ends_with'`\n  * `'wildcard'`\n\nIf this array is undefined or empty, all options will be shown.","sourceRange":{"start":{"line":1180,"column":12},"end":{"line":1182,"column":13}},"metadata":{},"type":"Array"},{"name":"number-comparators","description":"Comparison options shown in the advanced filtering UI for columns\nof type `number`. Valid options are:\n\n  * `'less_than'`\n  * `'equals'`\n  * `'not_equal'`\n  * `'equal_or_greater_than'`\n  * `'equal_or_less_than'`\n  * `'greater_than'`\n\nIf this array is undefined or empty, all options will be shown.","sourceRange":{"start":{"line":1197,"column":12},"end":{"line":1199,"column":13}},"metadata":{},"type":"Array"}],"events":[{"type":"CustomEvent","name":"table-data-changed","description":"Fired when the `tableData` property changes.","metadata":{}},{"type":"CustomEvent","name":"selected-items-changed","description":"Fired when the `selectedItems` property changes.","metadata":{}},{"type":"CustomEvent","name":"active-item-changed","description":"Fired when the `activeItem` property changes.","metadata":{}},{"type":"CustomEvent","name":"expanded-items-changed","description":"Fired when the `expandedItems` property changes.","metadata":{}}],"styling":{"cssVariables":[],"selectors":[]},"slots":[],"tagname":"px-data-grid","mixins":["Predix.DataGridFilterableMixin"]},{"description":"`<px-data-grid-paginated>` - Predix UI component which defines a paginated data grid.\n\nDue to incompatibility of paginated grid with features in the list below, these won't\nbe available for px-data-grid-paginated:\n\n- Group By Column\n- Select All checkbox in `<px-data-grid-selection-column>`","summary":"","path":"../px-data-grid/px-data-grid-paginated.html","properties":[{"name":"selectablePageSizes","type":"Array","description":"Array of selectable page sizes offered to the user.","privacy":"public","sourceRange":{"start":{"line":102,"column":12},"end":{"line":105,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[10,20,30]"},{"name":"page","type":"number","description":"Current page number of displayed items. Page 1 should be the minimum value.","privacy":"public","sourceRange":{"start":{"line":110,"column":12},"end":{"line":114,"column":13}},"metadata":{"polymer":{"observer":"\"_onPageChange\""}},"defaultValue":"1"},{"name":"autoHidePageList","type":"boolean","description":"Set to automatically hide the page numbers when there is only\n1 page available.","privacy":"public","sourceRange":{"start":{"line":120,"column":12},"end":{"line":123,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"tableData","type":"Array","description":"Data for the table to display.\n\nPass an array of objects. Each object will be rendered as a row\nin the grid. The objects should share many of the same keys.\nEach key will be used to group data into columns.\n\nUse the `columns` property to control which keys are displayed\nto the user and which are not, and to control how the grid\nhandles the data for each column. By default if no `columns` are\ndefined the grid will automatically create columns from all of\nthe keys found in the first object.\n\nExample data:\n\n```\n[\n  {\n    first: 'Elizabeth',\n    last: 'Wong',\n    email: 'sika@iknulber.cl'\n  },\n  {\n    first: 'Jeffrey',\n    last: 'Hamilton',\n    email: 'cofok@rac.be'\n  },\n  {\n    first: 'Alma',\n    last: 'Martin',\n    email: 'dotta@behtam.la'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":162,"column":12},"end":{"line":165,"column":13}},"metadata":{"polymer":{"notify":true}}},{"name":"hideSelectionColumn","type":"boolean","description":"Set to hide the selection checkbox for each row.\n\nBy default, if the `selectionMode` property is set to `'single'`\nor `'multi'` the grid shows a checkbox/radio button the user\ncan click to select or deselect a row. When this property is\nenabled, the checkbox is hidden and the user can click directly\non row contents to select or deselect a row.","privacy":"public","sourceRange":{"start":{"line":176,"column":12},"end":{"line":179,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"selectedItems","type":"Array","description":"Array of selected items. Automatically updated by the grid when\nthe user selects items. Each item will be a reference to the\n`tableData` item that was passed to render the row.\n\nAdd references to `tableData` items to programmatically select\nitems from your application.","privacy":"public","sourceRange":{"start":{"line":189,"column":12},"end":{"line":193,"column":13}},"metadata":{"polymer":{"notify":true}},"defaultValue":"[]"},{"name":"size","type":"number","description":"The total number of items","privacy":"public","sourceRange":{"start":{"line":199,"column":12},"end":{"line":203,"column":13}},"metadata":{"polymer":{"observer":"\"_ensureValidPageNumber\""}}},{"name":"pageSize","type":"number","description":"For paginated grid, the number of items visible in a single\npage. Set to a higher number to show more items.\n\n`pageSize` is also used to set the number of items fetched\nduring each request to the `remoteDataProvider` if one is used.\nSee the `remoteDataProvider` property for more information.","privacy":"public","sourceRange":{"start":{"line":213,"column":12},"end":{"line":217,"column":13}},"metadata":{"polymer":{"observer":"\"_onPageSizeChange\""}},"defaultValue":"10"},{"name":"multiSort","type":"boolean","description":"When `true`, user can sort by multiple columns","privacy":"public","sourceRange":{"start":{"line":222,"column":12},"end":{"line":225,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"selectionMode","type":"string","description":"Sets the current selection mode for the grid. Valid modes are:\n\n  * `'none'` - User can't select any rows\n  * `'single'` - User can select one row at a time\n  * `'multi'` - User can select multiple rows at the same time","privacy":"public","sourceRange":{"start":{"line":234,"column":12},"end":{"line":237,"column":13}},"metadata":{"polymer":{}},"defaultValue":"\"none\""},{"name":"activeItem","type":"Object","description":"The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.","privacy":"public","sourceRange":{"start":{"line":244,"column":12},"end":{"line":248,"column":13}},"metadata":{"polymer":{"notify":true}},"defaultValue":"null"},{"name":"resizable","type":"boolean","description":"Set to `true` to allow the user to resize columns.","privacy":"public","sourceRange":{"start":{"line":253,"column":12},"end":{"line":256,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"editable","type":"boolean","description":"Set to allow users to edit data in the grid. You must also\nexplicitly set the `columns.editable` property to true for each\ncolumn the user can edit in the grid.\n\nWhen the user starts or stops editing a row the\n`editing-item-changed` event will be fired. `event.detail.item`\nwill contain a reference to the row being edited.\n\nAfter a user finishes editing a row the `item-edited` event\nwill be fired. `event.detail` will contain information about\nwhat the user changed.","privacy":"public","sourceRange":{"start":{"line":271,"column":12},"end":{"line":274,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"columnReorderingAllowed","type":"boolean","description":"Set to `true` to allow the user to re-order columns by dragging\nand dropping them. Can't be combined with some other states like\ngroup-by-value.","privacy":"public","sourceRange":{"start":{"line":281,"column":12},"end":{"line":284,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"expandedItems","type":"Array","description":"An array containing references to the expanded rows.\n\nAutomatically updated by the grid in the following cases:\n\n  * When a `row-details` template is provided to create expandable\n    rows the grid will add rows to this list when they are\n    expanded by the user, and remove rows when they are collapsed\n    by the user.\n  * When the user groups rows by column the grid will add rows\n    that the user expands and remove rows the user collapses.\n\nSet this value to references to rows to expand or collapse\nthe rows programmatically.","privacy":"public","sourceRange":{"start":{"line":301,"column":12},"end":{"line":304,"column":13}},"metadata":{"polymer":{}},"defaultValue":"[]"},{"name":"hideActionMenu","type":"boolean","description":"Set to hide the action menu button displayed at the top right of\nthe grid.\n\nIf the action menu is hidden, the user will not be able to unhide\nany hidden columns.","privacy":"public","sourceRange":{"start":{"line":313,"column":12},"end":{"line":316,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"columns","type":"Array","description":"Defines the columns the grid should render. If no columns are\npassed, the grid generates columns from the `tableData` passed\nin. Columns are rendered in the same order as the array.\n\n## `column` options\n\nThe following options are available for all column types. Only\n`name` and `path` are required, all others are optional:\n\n  * `{string} name` - Human-readable name displayed in the column\n    header\n\n  * `{string} path` - Key used to get the column data from each\n    of the `tableData` objects\n\n  * `{string} id='column.path[column.type]'` - Unique identifier\n    of the column. By default, px-data-grid will automatically\n    generate it from `column.path` and `column.type`. There can't\n    be 2 columns with the same id. The value `-any-` is a\n    reserved keyword that you cannot use for any column `id`.\n\n  * `{string} type=('string'|'number'|'date')` - Type of data\n    in the column. Used in the advanced filter UI to show\n    different filter options for each data type. Does not change\n    the renderer or impact sorting.\n\n  * `{string} renderer` - The name of the web component used to\n    render each cell in the column. There are three built-in\n    renderers available: `'px-data-grid-string-renderer'` (the\n    default renderer), `'px-data-grid-number-renderer'`, and\n    `'px-data-grid-date-renderer'`. You can also create a custom\n    renderer and use its name here. If no renderer is specified,\n    the column cannot be edited by the user.\n\n  * `{object} rendererConfig` - Settings to pass to the renderer\n    that change how data is displayed to the user. See the\n    examples below for information on which options are available\n    for each built-in renderer.\n\nThe following options are available for columns of type `date`:\n\n  * `{array} dateRanges` - List of pre-defined date ranges that\n    will appear in advanced filter dropdown for this column.\n    See the examples below for examples on how to format\n    each date range.\n\nThe following options are available for columns of type `number`:\n\n  * `{number} minBound` - Defines a minimum bound of a number in\n    the advanced filter field for this column. If both minBound\n    and maxBound properties are defined, the advanced filter will\n    display a slider instead of a condition dropdown.\n\n  * `{number} maxBound` - Defines a maximum bound of a number in\n    the advanced filter field for this column.\n\n  * `{boolean} hidden=false` - Hides the column from the user\n    when the grid is rendered. Automatically updated when the\n    user shows/hides columns using action menu(s).\n\n  * `{boolean} frozen=false` - Freezes the column. When the user\n    scrolls the grid horizontally frozen columns will not move.\n    Automatically updated when the user freezes/unfreezes columns\n    using action menu(s).\n\n  * `{boolean} required=false` - Used in renderers during editing.\n    If the column is required, the user will not be allowed to\n    enter a blank value.\n\n  * `{number} flexGrow=1` - Sets the relative size of the column\n    compared to other columns in the grid. Equivalent to the CSS\n    `flex-grow` property.\n\n## `column.rendererConfig` options\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `date`. All formats should be set to a valid\n[moment.js format string](https://momentjs.com/docs/#/parsing/string-format/)\nor to 'ISO':\n\n  * `{string} rendererConfig.displayFormat='YYYY-MM-DD'` -\n    Format used to display the date for the user.\n\n  * `{string} rendererConfig.dataFormat='YYYY-MM-DD'` - Format\n    the grid expects data in when reading it from `tableData`.\n\n  * `{string} rendererConfig.datePickerDateFormat='YYYY-MM-DD'` -\n    Format used for the px-datetime-picker date when the user\n    edits cells in the column.\n\n  * `{string} rendererConfig.datePickerTimeFormat='HH:MM:SS'` -\n    Format used for the px-datetime-picker time when the user\n    edits cells in the column.\n\n  * `{boolean} rendererConfig.hideDate=false` - Hides the date\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\n  * `{boolean} rendererConfig.hideTime=true` - Hides the time\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `number`:\n\n  * `{?string} rendererConfig.displayFormat=null` - Format used to\n    display numbers in this column. Set to a valid\n    [numbro.js format string](http://numbrojs.com/format.html).\n    Set to `null` to display the number exactly as it appears\n    in the `tableData` by coercing it to string.\n\n  * `{string} rendererConfig.displayCulture='en-US'` - Changes the\n    way numbers in this column are displayed to the user by\n    localizing to get the correct format for commas, decimals,\n    etc. See [numbro.js languages](http://numbrojs.com/languages.html)\n    for a list of valid options.\n\n  * `{boolean} rendererConfig.displayIsCurrency=false` - Set to\n    `true` if the data in this column should be formatted as\n    currency. Will use `rendererConfig.displayFormat` to figure\n    out how to display the currency, or fall back to a localized\n    default based on `rendererConfig.displayCulture`.\n\n  * `{string} displayZeroFormat` - Used to format numbers equal\n    to `0` in this column. See [numbro.js docs](http://numbrojs.com/format.html)\n    for a list of valid options.\n\n## Examples\n\nExample format for a single column with all configurations used:\n\n```javascript\n{\n  id: 'first[string]',\n  name: 'First Name',\n  path: 'first',\n  type: 'string',\n  renderer: 'px-data-grid-string-renderer',\n  rendererConfig: {\n    customInfo: 'some info',\n    customInfo2: 42\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ],\n  minBound: 1,\n  maxBound: 10,\n  hidden: false,\n  frozen: false,\n  required: false,\n  flexGrow: 1\n}\n```\n\nExample format for column of type `date` with custom `dateRanges`:\n\n```javascript\n{\n  name: 'Birth date',\n  path: 'birth_date',\n  type: 'date',\n  editable: true,\n  renderer: 'px-data-grid-date-renderer',\n  rendererConfig: {\n    hideTime: true,\n    displayFormat: 'YYYY/MM/DD',\n    dataFormat: 'YYYY-MM-DD'\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last 14 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(14, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'This month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(31, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').subtract(1, 'M').format(),\n          dateFrom: window.moment().tz('UTC').subtract(2, 'M').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ]\n}\n```","privacy":"public","sourceRange":{"start":{"line":555,"column":12},"end":{"line":557,"column":13}},"metadata":{"polymer":{}}},{"name":"language","type":"string","description":"A valid IETF language tag as a string that `app-localize-behavior`\nwill use to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for\nAPI documentation and more information.","privacy":"public","sourceRange":{"start":{"line":566,"column":12},"end":{"line":569,"column":13}},"metadata":{"polymer":{}},"defaultValue":"\"en\""},{"name":"useKeyIfMissing","type":"boolean","description":"Use the key for localization if value for that language is missing.\nShould always be true for Predix components.","privacy":"public","sourceRange":{"start":{"line":575,"column":12},"end":{"line":578,"column":13}},"metadata":{"polymer":{}},"defaultValue":"true"},{"name":"resources","type":"Object","description":"Library object of hardcoded strings used in this application.\nUsed by `app-localize-behavior` in conjunction with `language`.","privacy":"public","sourceRange":{"start":{"line":584,"column":12},"end":{"line":602,"column":13}},"metadata":{"polymer":{}},"defaultValue":"{\"en\":{\"Rows per page\":\"Rows per page\",\"of {total}\":\"of {total}\"},\"fr\":{\"Rows per page\":\"Lignes par page\",\"of {total}\":\"sur {total}\"},\"fi\":{\"Rows per page\":\"Riviä / sivu\",\"of {total}\":\"/ {total}\"}}"},{"name":"tableActions","type":"Array","description":"A list of custom actions that are shown when the user taps the\naction menu button at the top right of the grid. If the\n`hideActionMenu` property is enabled the action menu won't be\nshown to the user.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Export CSV\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`table-action` event. `event.detail.id` will be the action ID.\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Export CSV',\n    id: 'CSV'\n  }\n  {\n    name: 'Export Excel',\n    id: 'Excel'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":635,"column":12},"end":{"line":637,"column":13}},"metadata":{"polymer":{}}},{"name":"itemActions","type":"Array","description":"A list of custom actions that are shown in the actions menu\nfor each data row. The action menu button appears to the right\nof each row when the user hovers over the row.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Add Row After\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`item-action` event. `event.detail.id` will be the action ID and\n`event.detail.item` will be a reference to the row the user\ntook action on (from `tableData`).\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Add Row After',\n    id: 'add-after'\n  }\n  {\n    name: 'Delete Row',\n    id: 'delete'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":671,"column":12},"end":{"line":673,"column":13}},"metadata":{"polymer":{}}},{"name":"remoteDataProvider","type":"Function","description":"Function that provides items lazily. Receives arguments `params`, `callback`:\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders\n\n`params.parentItem` When expandable table is used, and sublevel items\nare requested, reference to parent item of the requested sublevel.\nOtherwise `undefined`.\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items.\n\n`<px-data-grid>` calls this function lazily, only when it needs more data\nto be displayed.\n\n__Also, note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(\n      response.employees, // requested page of items\n      response.totalSize  // total number of items\n    );\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```\n\n__Alternatively, you can use the `size` property to set the total number of items:__\n\n```javascript\npxDataGrid.size = 200; // The total number of items\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(response.employees);\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```","privacy":"public","sourceRange":{"start":{"line":737,"column":12},"end":{"line":740,"column":13}},"metadata":{"polymer":{"observer":"\"_remoteDataProviderChanged\""}}},{"name":"_currentDataProvider","type":"Function","description":"","privacy":"protected","sourceRange":{"start":{"line":742,"column":12},"end":{"line":744,"column":13}},"metadata":{"polymer":{}}},{"name":"striped","type":"boolean","description":"Set to add a background color to every other row in the grid.\nCan make it easier for users to scan across long rows. Striping\nis disabled in group-by-column mode.","privacy":"public","sourceRange":{"start":{"line":751,"column":12},"end":{"line":754,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"ellipsis","type":"boolean","description":"Set to show an ellipsis and truncate text for columns where the\ntext doesn't fit in the column.\n\nDo not enable wrap mode while ellipsis mode is enabled.","privacy":"public","sourceRange":{"start":{"line":762,"column":12},"end":{"line":765,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"loadingSpinnerDebounce","type":"number","description":"Number of milliseconds to wait before showing the loading spinner\nwhen requesting new data from the `remoteDataProvider`.","privacy":"public","sourceRange":{"start":{"line":771,"column":12},"end":{"line":774,"column":13}},"metadata":{"polymer":{}},"defaultValue":"500"},{"name":"autoFilter","type":"boolean","description":"Set to `true` to enable simple filtering. When enabled, a search\nbox will be shown at the top of the grid. The user can type\nin the search box to hide rows that don't include the stringified\nvalue they're looking for. The grid will search all columns and\ntreat all column types as strings for matching purposes.\n\nSee `filterable` property for a more advanced filter option.","privacy":"public","sourceRange":{"start":{"line":785,"column":12},"end":{"line":788,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"highlight","type":"Array","description":"List of rules used to highligh specific columns, rows, or cells.\n\nPass an array of objects. Each object should have the following\nproperties:\n\n  * `{string} type` - If the highlight condition returns `true`,\n    the type determines what the grid will highlight. Set to\n    `'cell'` to highlight only the cell that passed the highlight\n    rule, `'row'` to highlight the row that holds the matching\n    cell, or `'column'` to highlight the column that holds the\n    matching cell.\n  * `{Function} condition` - Function that will be called by the\n    grid for each cell. If the function returns `true`, the\n    highlight rule will be triggered. If the function returns a\n    falsey value, the highlight rule will not be used. The function\n    will be passed three arguments: `cellContent` containing\n    the text of the cell, `column` containing a reference to the\n    `columns` object for the cell's column, and `item` as a reference\n    to the `tableData` item used to create the cell's row.\n  * `{string} color` - A valid CSS color (e.g. hex code or color\n    name). If the highlight condition returns `true`, the color\n    will be used to set the background color of the matching\n    cell, column, or row.\n\nExample highlight rules:\n\n```javascript\n[\n  {\n    type: 'cell',\n    condition: (cellContent, column, item) => { return cellContent == 'John Doe' },\n  },\n  {\n    type: 'row',\n    condition: (cellContent, item) => { return cellContent[0] == 'a' },\n    color: '#a8a8a8'\n  },\n  {\n    type: 'column',\n    condition (column, item) => { return column.name == 'age' },\n    color: 'pink'\n  }\n]\n```","privacy":"public","sourceRange":{"start":{"line":836,"column":12},"end":{"line":838,"column":13}},"metadata":{"polymer":{}}},{"name":"_hasLocalDataProvider","type":"boolean","description":"When true data provider is local, when false external (remote) and\nwhen undefined it defined yet.","privacy":"protected","sourceRange":{"start":{"line":844,"column":12},"end":{"line":846,"column":13}},"metadata":{"polymer":{}}},{"name":"defaultColumnWidth","type":"string","description":"Default width for columns. Defaults to `100px` if undefined.\n\nColumn sizes should also be configured using the\n`defaultColumnFlexGrow` and `columns.flexGrow` properties to\nchange how each column sizes itself relative to other columns in\nthe grid.\n\nWhen column flex-grow properties are set to non-zero values,\nthis size behaves as a minimum width for the column.","privacy":"public","sourceRange":{"start":{"line":859,"column":12},"end":{"line":861,"column":13}},"metadata":{"polymer":{}}},{"name":"defaultColumnFlexGrow","type":"number","description":"Default flex-grow value for columns if none is defined in\n`columns.flexGrow`. Equivalent to the CSS flex-grow property.","privacy":"public","sourceRange":{"start":{"line":867,"column":12},"end":{"line":869,"column":13}},"metadata":{"polymer":{}}},{"name":"gridHeight","type":"string","description":"Defines the height of grid.\n\n  * Set to `'auto'` if the grid should grow to fit all of its rows\n  * Set to `'default'` or undefined to use the default height\n  * Set to any other valid CSS height valid (e.g. `400px`) to\n    define a static height for the grid area inside the\n    px-data-grid. This height will not include the table action\n    menu and other elements of the grid.\n\nSee the `flexToSize` property for a different strategy that sizes\nthe grid based on its parent element's height.","privacy":"public","sourceRange":{"start":{"line":884,"column":12},"end":{"line":887,"column":13}},"metadata":{"polymer":{}},"defaultValue":"\"auto\""},{"name":"itemIdPath","type":"string","description":"Path to a `tableData` item sub-property that serves as a unique\nidentifier for the item. Should be defined if the grid allows\nuser editing so the grid can pair new versions of each item\nwith the original data.\n\nPath must be unique for each item, must exist for every item,\nand should not be changed or be user editable.","privacy":"public","sourceRange":{"start":{"line":898,"column":12},"end":{"line":900,"column":13}},"metadata":{"polymer":{}}},{"name":"offerFilterSaving","type":"boolean","description":"Set to allow users to save filters created in the advanced filter\ndialog. If enabled, the grid will fire `save-filters` events when\nthe user taps the save filter button.","privacy":"public","sourceRange":{"start":{"line":907,"column":12},"end":{"line":909,"column":13}},"metadata":{"polymer":{}}},{"name":"filterable","type":"boolean","description":"Set to enable advanced filtering. When enabled, a filter\nbutton will be shown at the top of the grid. When the user clicks\non the filter button, a modal will be shown and the user can\nfilter visible items using different UI patterns.\n\nColumns should have the right `columns.type` set to ensure the\nadvanced filtering works as expected. See the `columns` property\nfor more information on setting the type, and for more advanced\nfiltering options that can be customized for `number` and `date`\ntype columns.","privacy":"public","sourceRange":{"start":{"line":923,"column":12},"end":{"line":926,"column":13}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"stringComparators","type":"Array","description":"Comparison options shown in the advanced filtering UI for columns\nof type `string`. Valid options are:\n\n  * `'equals'`\n  * `'contains'`\n  * `'starts_with'`\n  * `'ends_with'`\n  * `'wildcard'`\n\nIf this array is undefined or empty, all options will be shown.","privacy":"public","sourceRange":{"start":{"line":940,"column":12},"end":{"line":942,"column":13}},"metadata":{"polymer":{}}},{"name":"numberComparators","type":"Array","description":"Comparison options shown in the advanced filtering UI for columns\nof type `number`. Valid options are:\n\n  * `'less_than'`\n  * `'equals'`\n  * `'not_equal'`\n  * `'equal_or_greater_than'`\n  * `'equal_or_less_than'`\n  * `'greater_than'`\n\nIf this array is undefined or empty, all options will be shown.","privacy":"public","sourceRange":{"start":{"line":957,"column":12},"end":{"line":959,"column":13}},"metadata":{"polymer":{}}}],"methods":[{"name":"ready","description":"","privacy":"protected","sourceRange":{"start":{"line":969,"column":8},"end":{"line":972,"column":9}},"metadata":{},"params":[]},{"name":"_resolvePxDataGrid","description":"","privacy":"protected","sourceRange":{"start":{"line":974,"column":8},"end":{"line":979,"column":9}},"metadata":{},"params":[]},{"name":"_tableDataChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":981,"column":8},"end":{"line":990,"column":9}},"metadata":{},"params":[{"name":"tableData"},{"name":"splices"},{"name":"isAttached"}]},{"name":"_remoteDataProviderChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":992,"column":8},"end":{"line":995,"column":9}},"metadata":{},"params":[{"name":"provider"}]},{"name":"_wrapDataProvider","description":"Wrap the supplied data provider in order to manipulate the request and data\nto work with our pagination state.","privacy":"protected","sourceRange":{"start":{"line":1001,"column":8},"end":{"line":1022,"column":9}},"metadata":{},"params":[{"name":"provider"}]},{"name":"_localDataProvider","description":"","privacy":"protected","sourceRange":{"start":{"line":1024,"column":8},"end":{"line":1031,"column":9}},"metadata":{},"params":[{"name":"params"},{"name":"callback"}]},{"name":"_localDataResolver","description":"","privacy":"protected","sourceRange":{"start":{"line":1033,"column":8},"end":{"line":1077,"column":9}},"metadata":{},"params":[{"name":"params"},{"name":"items"}]},{"name":"_getAllLocalItems","description":"Will return all local items after filter (no ordering applied)","privacy":"protected","sourceRange":{"start":{"line":1082,"column":8},"end":{"line":1092,"column":9}},"metadata":{},"params":[]},{"name":"_onNavigationChange","description":"Listener for px-data-grid-navigation component","privacy":"protected","sourceRange":{"start":{"line":1097,"column":8},"end":{"line":1106,"column":9}},"metadata":{},"params":[{"name":"event"}]},{"name":"_onPageSizeChange","description":"","privacy":"protected","sourceRange":{"start":{"line":1108,"column":8},"end":{"line":1112,"column":9}},"metadata":{},"params":[{"name":"pageSize"}]},{"name":"_onPageChange","description":"","privacy":"protected","sourceRange":{"start":{"line":1114,"column":8},"end":{"line":1117,"column":9}},"metadata":{},"params":[{"name":"page"}]},{"name":"_updateGridData","description":"Update grid data via the current data provider.","privacy":"protected","sourceRange":{"start":{"line":1122,"column":8},"end":{"line":1127,"column":9}},"metadata":{},"params":[]},{"name":"_ensureValidPageNumber","description":"Checks if current page is smaller than the total number of pages\nand larger than 0.\nIf it is not valid, then reset it to 1.","privacy":"protected","sourceRange":{"start":{"line":1134,"column":8},"end":{"line":1140,"column":9}},"metadata":{},"params":[]},{"name":"_ensureValidPageSize","description":"Ensure page size is valid (greater than 0). If page size in invalid,\npage size will be set to 10.","privacy":"protected","sourceRange":{"start":{"line":1146,"column":8},"end":{"line":1148,"column":9}},"metadata":{},"params":[]},{"name":"_calcNumPages","description":"Calculates the number pages based on  total number of rows and the page size","privacy":"protected","sourceRange":{"start":{"line":1153,"column":8},"end":{"line":1159,"column":9}},"metadata":{},"params":[{"name":"numItems"},{"name":"pageSize"}]},{"name":"_hidePageList","description":"","privacy":"protected","sourceRange":{"start":{"line":1161,"column":8},"end":{"line":1163,"column":9}},"metadata":{},"params":[{"name":"autoHidePageList"},{"name":"size"},{"name":"pageSize"}]},{"name":"getData","description":"Get data current shown on grid","privacy":"public","sourceRange":{"start":{"line":1168,"column":8},"end":{"line":1170,"column":9}},"metadata":{},"params":[{"name":"visibleOnly"}]},{"name":"getVisibleColumns","description":"Get current visible columns in grid","privacy":"public","sourceRange":{"start":{"line":1175,"column":8},"end":{"line":1177,"column":9}},"metadata":{},"params":[]},{"name":"resolveColumnHeader","description":"Helper method to check if header is defined, if not use name","privacy":"public","sourceRange":{"start":{"line":1182,"column":8},"end":{"line":1184,"column":9}},"metadata":{},"params":[{"name":"column"}]}],"staticMethods":[],"demos":[],"metadata":{},"sourceRange":{"start":{"line":89,"column":6},"end":{"line":1185,"column":7}},"privacy":"public","superclass":"HTMLElement","name":"DataGridPaginatedElement","attributes":[{"name":"selectable-page-sizes","description":"Array of selectable page sizes offered to the user.","sourceRange":{"start":{"line":102,"column":12},"end":{"line":105,"column":13}},"metadata":{},"type":"Array"},{"name":"page","description":"Current page number of displayed items. Page 1 should be the minimum value.","sourceRange":{"start":{"line":110,"column":12},"end":{"line":114,"column":13}},"metadata":{},"type":"number"},{"name":"auto-hide-page-list","description":"Set to automatically hide the page numbers when there is only\n1 page available.","sourceRange":{"start":{"line":120,"column":12},"end":{"line":123,"column":13}},"metadata":{},"type":"boolean"},{"name":"table-data","description":"Data for the table to display.\n\nPass an array of objects. Each object will be rendered as a row\nin the grid. The objects should share many of the same keys.\nEach key will be used to group data into columns.\n\nUse the `columns` property to control which keys are displayed\nto the user and which are not, and to control how the grid\nhandles the data for each column. By default if no `columns` are\ndefined the grid will automatically create columns from all of\nthe keys found in the first object.\n\nExample data:\n\n```\n[\n  {\n    first: 'Elizabeth',\n    last: 'Wong',\n    email: 'sika@iknulber.cl'\n  },\n  {\n    first: 'Jeffrey',\n    last: 'Hamilton',\n    email: 'cofok@rac.be'\n  },\n  {\n    first: 'Alma',\n    last: 'Martin',\n    email: 'dotta@behtam.la'\n  }\n]\n```","sourceRange":{"start":{"line":162,"column":12},"end":{"line":165,"column":13}},"metadata":{},"type":"Array"},{"name":"hide-selection-column","description":"Set to hide the selection checkbox for each row.\n\nBy default, if the `selectionMode` property is set to `'single'`\nor `'multi'` the grid shows a checkbox/radio button the user\ncan click to select or deselect a row. When this property is\nenabled, the checkbox is hidden and the user can click directly\non row contents to select or deselect a row.","sourceRange":{"start":{"line":176,"column":12},"end":{"line":179,"column":13}},"metadata":{},"type":"boolean"},{"name":"selected-items","description":"Array of selected items. Automatically updated by the grid when\nthe user selects items. Each item will be a reference to the\n`tableData` item that was passed to render the row.\n\nAdd references to `tableData` items to programmatically select\nitems from your application.","sourceRange":{"start":{"line":189,"column":12},"end":{"line":193,"column":13}},"metadata":{},"type":"Array"},{"name":"size","description":"The total number of items","sourceRange":{"start":{"line":199,"column":12},"end":{"line":203,"column":13}},"metadata":{},"type":"number"},{"name":"page-size","description":"For paginated grid, the number of items visible in a single\npage. Set to a higher number to show more items.\n\n`pageSize` is also used to set the number of items fetched\nduring each request to the `remoteDataProvider` if one is used.\nSee the `remoteDataProvider` property for more information.","sourceRange":{"start":{"line":213,"column":12},"end":{"line":217,"column":13}},"metadata":{},"type":"number"},{"name":"multi-sort","description":"When `true`, user can sort by multiple columns","sourceRange":{"start":{"line":222,"column":12},"end":{"line":225,"column":13}},"metadata":{},"type":"boolean"},{"name":"selection-mode","description":"Sets the current selection mode for the grid. Valid modes are:\n\n  * `'none'` - User can't select any rows\n  * `'single'` - User can select one row at a time\n  * `'multi'` - User can select multiple rows at the same time","sourceRange":{"start":{"line":234,"column":12},"end":{"line":237,"column":13}},"metadata":{},"type":"string"},{"name":"active-item","description":"The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.","sourceRange":{"start":{"line":244,"column":12},"end":{"line":248,"column":13}},"metadata":{},"type":"Object"},{"name":"resizable","description":"Set to `true` to allow the user to resize columns.","sourceRange":{"start":{"line":253,"column":12},"end":{"line":256,"column":13}},"metadata":{},"type":"boolean"},{"name":"editable","description":"Set to allow users to edit data in the grid. You must also\nexplicitly set the `columns.editable` property to true for each\ncolumn the user can edit in the grid.\n\nWhen the user starts or stops editing a row the\n`editing-item-changed` event will be fired. `event.detail.item`\nwill contain a reference to the row being edited.\n\nAfter a user finishes editing a row the `item-edited` event\nwill be fired. `event.detail` will contain information about\nwhat the user changed.","sourceRange":{"start":{"line":271,"column":12},"end":{"line":274,"column":13}},"metadata":{},"type":"boolean"},{"name":"column-reordering-allowed","description":"Set to `true` to allow the user to re-order columns by dragging\nand dropping them. Can't be combined with some other states like\ngroup-by-value.","sourceRange":{"start":{"line":281,"column":12},"end":{"line":284,"column":13}},"metadata":{},"type":"boolean"},{"name":"expanded-items","description":"An array containing references to the expanded rows.\n\nAutomatically updated by the grid in the following cases:\n\n  * When a `row-details` template is provided to create expandable\n    rows the grid will add rows to this list when they are\n    expanded by the user, and remove rows when they are collapsed\n    by the user.\n  * When the user groups rows by column the grid will add rows\n    that the user expands and remove rows the user collapses.\n\nSet this value to references to rows to expand or collapse\nthe rows programmatically.","sourceRange":{"start":{"line":301,"column":12},"end":{"line":304,"column":13}},"metadata":{},"type":"Array"},{"name":"hide-action-menu","description":"Set to hide the action menu button displayed at the top right of\nthe grid.\n\nIf the action menu is hidden, the user will not be able to unhide\nany hidden columns.","sourceRange":{"start":{"line":313,"column":12},"end":{"line":316,"column":13}},"metadata":{},"type":"boolean"},{"name":"columns","description":"Defines the columns the grid should render. If no columns are\npassed, the grid generates columns from the `tableData` passed\nin. Columns are rendered in the same order as the array.\n\n## `column` options\n\nThe following options are available for all column types. Only\n`name` and `path` are required, all others are optional:\n\n  * `{string} name` - Human-readable name displayed in the column\n    header\n\n  * `{string} path` - Key used to get the column data from each\n    of the `tableData` objects\n\n  * `{string} id='column.path[column.type]'` - Unique identifier\n    of the column. By default, px-data-grid will automatically\n    generate it from `column.path` and `column.type`. There can't\n    be 2 columns with the same id. The value `-any-` is a\n    reserved keyword that you cannot use for any column `id`.\n\n  * `{string} type=('string'|'number'|'date')` - Type of data\n    in the column. Used in the advanced filter UI to show\n    different filter options for each data type. Does not change\n    the renderer or impact sorting.\n\n  * `{string} renderer` - The name of the web component used to\n    render each cell in the column. There are three built-in\n    renderers available: `'px-data-grid-string-renderer'` (the\n    default renderer), `'px-data-grid-number-renderer'`, and\n    `'px-data-grid-date-renderer'`. You can also create a custom\n    renderer and use its name here. If no renderer is specified,\n    the column cannot be edited by the user.\n\n  * `{object} rendererConfig` - Settings to pass to the renderer\n    that change how data is displayed to the user. See the\n    examples below for information on which options are available\n    for each built-in renderer.\n\nThe following options are available for columns of type `date`:\n\n  * `{array} dateRanges` - List of pre-defined date ranges that\n    will appear in advanced filter dropdown for this column.\n    See the examples below for examples on how to format\n    each date range.\n\nThe following options are available for columns of type `number`:\n\n  * `{number} minBound` - Defines a minimum bound of a number in\n    the advanced filter field for this column. If both minBound\n    and maxBound properties are defined, the advanced filter will\n    display a slider instead of a condition dropdown.\n\n  * `{number} maxBound` - Defines a maximum bound of a number in\n    the advanced filter field for this column.\n\n  * `{boolean} hidden=false` - Hides the column from the user\n    when the grid is rendered. Automatically updated when the\n    user shows/hides columns using action menu(s).\n\n  * `{boolean} frozen=false` - Freezes the column. When the user\n    scrolls the grid horizontally frozen columns will not move.\n    Automatically updated when the user freezes/unfreezes columns\n    using action menu(s).\n\n  * `{boolean} required=false` - Used in renderers during editing.\n    If the column is required, the user will not be allowed to\n    enter a blank value.\n\n  * `{number} flexGrow=1` - Sets the relative size of the column\n    compared to other columns in the grid. Equivalent to the CSS\n    `flex-grow` property.\n\n## `column.rendererConfig` options\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `date`. All formats should be set to a valid\n[moment.js format string](https://momentjs.com/docs/#/parsing/string-format/)\nor to 'ISO':\n\n  * `{string} rendererConfig.displayFormat='YYYY-MM-DD'` -\n    Format used to display the date for the user.\n\n  * `{string} rendererConfig.dataFormat='YYYY-MM-DD'` - Format\n    the grid expects data in when reading it from `tableData`.\n\n  * `{string} rendererConfig.datePickerDateFormat='YYYY-MM-DD'` -\n    Format used for the px-datetime-picker date when the user\n    edits cells in the column.\n\n  * `{string} rendererConfig.datePickerTimeFormat='HH:MM:SS'` -\n    Format used for the px-datetime-picker time when the user\n    edits cells in the column.\n\n  * `{boolean} rendererConfig.hideDate=false` - Hides the date\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\n  * `{boolean} rendererConfig.hideTime=true` - Hides the time\n    section of the px-datetime-picker when the user edits cells\n    in the column.\n\nThe following options can be set in the `rendererConfig` for\ncolumns of type `number`:\n\n  * `{?string} rendererConfig.displayFormat=null` - Format used to\n    display numbers in this column. Set to a valid\n    [numbro.js format string](http://numbrojs.com/format.html).\n    Set to `null` to display the number exactly as it appears\n    in the `tableData` by coercing it to string.\n\n  * `{string} rendererConfig.displayCulture='en-US'` - Changes the\n    way numbers in this column are displayed to the user by\n    localizing to get the correct format for commas, decimals,\n    etc. See [numbro.js languages](http://numbrojs.com/languages.html)\n    for a list of valid options.\n\n  * `{boolean} rendererConfig.displayIsCurrency=false` - Set to\n    `true` if the data in this column should be formatted as\n    currency. Will use `rendererConfig.displayFormat` to figure\n    out how to display the currency, or fall back to a localized\n    default based on `rendererConfig.displayCulture`.\n\n  * `{string} displayZeroFormat` - Used to format numbers equal\n    to `0` in this column. See [numbro.js docs](http://numbrojs.com/format.html)\n    for a list of valid options.\n\n## Examples\n\nExample format for a single column with all configurations used:\n\n```javascript\n{\n  id: 'first[string]',\n  name: 'First Name',\n  path: 'first',\n  type: 'string',\n  renderer: 'px-data-grid-string-renderer',\n  rendererConfig: {\n    customInfo: 'some info',\n    customInfo2: 42\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ],\n  minBound: 1,\n  maxBound: 10,\n  hidden: false,\n  frozen: false,\n  required: false,\n  flexGrow: 1\n}\n```\n\nExample format for column of type `date` with custom `dateRanges`:\n\n```javascript\n{\n  name: 'Birth date',\n  path: 'birth_date',\n  type: 'date',\n  editable: true,\n  renderer: 'px-data-grid-date-renderer',\n  rendererConfig: {\n    hideTime: true,\n    displayFormat: 'YYYY/MM/DD',\n    dataFormat: 'YYYY-MM-DD'\n  },\n  dateRanges: [\n    {\n      name: 'Last 7 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(7, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last 14 days',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(14, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'This month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').format(),\n          dateFrom: window.moment().tz('UTC').subtract(31, 'd').format()\n        };\n      }\n    },\n    {\n      name: 'Last month',\n      getRange: () => {\n        return {\n          // use timezone of source data\n          dateTo: window.moment().tz('UTC').subtract(1, 'M').format(),\n          dateFrom: window.moment().tz('UTC').subtract(2, 'M').format()\n        };\n      }\n    },\n    {\n      name: 'Fixed range',\n      range: {\n        dateTo: '1996-11-10',\n        dateFrom: '1985-12-19'\n      }\n    }\n  ]\n}\n```","sourceRange":{"start":{"line":555,"column":12},"end":{"line":557,"column":13}},"metadata":{},"type":"Array"},{"name":"language","description":"A valid IETF language tag as a string that `app-localize-behavior`\nwill use to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for\nAPI documentation and more information.","sourceRange":{"start":{"line":566,"column":12},"end":{"line":569,"column":13}},"metadata":{},"type":"string"},{"name":"use-key-if-missing","description":"Use the key for localization if value for that language is missing.\nShould always be true for Predix components.","sourceRange":{"start":{"line":575,"column":12},"end":{"line":578,"column":13}},"metadata":{},"type":"boolean"},{"name":"resources","description":"Library object of hardcoded strings used in this application.\nUsed by `app-localize-behavior` in conjunction with `language`.","sourceRange":{"start":{"line":584,"column":12},"end":{"line":602,"column":13}},"metadata":{},"type":"Object"},{"name":"table-actions","description":"A list of custom actions that are shown when the user taps the\naction menu button at the top right of the grid. If the\n`hideActionMenu` property is enabled the action menu won't be\nshown to the user.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Export CSV\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`table-action` event. `event.detail.id` will be the action ID.\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Export CSV',\n    id: 'CSV'\n  }\n  {\n    name: 'Export Excel',\n    id: 'Excel'\n  }\n]\n```","sourceRange":{"start":{"line":635,"column":12},"end":{"line":637,"column":13}},"metadata":{},"type":"Array"},{"name":"item-actions","description":"A list of custom actions that are shown in the actions menu\nfor each data row. The action menu button appears to the right\nof each row when the user hovers over the row.\n\nEach array entry should be an object with the following properties:\n\n  * `{string} name` - Label shown in the action menu, should\n    prompt the user to do something (e.g. \"Add Row After\")\n  * `{string} id` - Unique identifier that will be included in the\n    event fired when the user taps an action in the menu\n\nWhen the user taps an action in the menu the grid will fire the\n`item-action` event. `event.detail.id` will be the action ID and\n`event.detail.item` will be a reference to the row the user\ntook action on (from `tableData`).\n\nExample actions:\n\n```javascript\n[\n  {\n    name: 'Add Row After',\n    id: 'add-after'\n  }\n  {\n    name: 'Delete Row',\n    id: 'delete'\n  }\n]\n```","sourceRange":{"start":{"line":671,"column":12},"end":{"line":673,"column":13}},"metadata":{},"type":"Array"},{"name":"remote-data-provider","description":"Function that provides items lazily. Receives arguments `params`, `callback`:\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders\n\n`params.parentItem` When expandable table is used, and sublevel items\nare requested, reference to parent item of the requested sublevel.\nOtherwise `undefined`.\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items.\n\n`<px-data-grid>` calls this function lazily, only when it needs more data\nto be displayed.\n\n__Also, note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(\n      response.employees, // requested page of items\n      response.totalSize  // total number of items\n    );\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```\n\n__Alternatively, you can use the `size` property to set the total number of items:__\n\n```javascript\npxDataGrid.size = 200; // The total number of items\npxDataGrid.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(response.employees);\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```","sourceRange":{"start":{"line":737,"column":12},"end":{"line":740,"column":13}},"metadata":{},"type":"Function"},{"name":"striped","description":"Set to add a background color to every other row in the grid.\nCan make it easier for users to scan across long rows. Striping\nis disabled in group-by-column mode.","sourceRange":{"start":{"line":751,"column":12},"end":{"line":754,"column":13}},"metadata":{},"type":"boolean"},{"name":"ellipsis","description":"Set to show an ellipsis and truncate text for columns where the\ntext doesn't fit in the column.\n\nDo not enable wrap mode while ellipsis mode is enabled.","sourceRange":{"start":{"line":762,"column":12},"end":{"line":765,"column":13}},"metadata":{},"type":"boolean"},{"name":"loading-spinner-debounce","description":"Number of milliseconds to wait before showing the loading spinner\nwhen requesting new data from the `remoteDataProvider`.","sourceRange":{"start":{"line":771,"column":12},"end":{"line":774,"column":13}},"metadata":{},"type":"number"},{"name":"auto-filter","description":"Set to `true` to enable simple filtering. When enabled, a search\nbox will be shown at the top of the grid. The user can type\nin the search box to hide rows that don't include the stringified\nvalue they're looking for. The grid will search all columns and\ntreat all column types as strings for matching purposes.\n\nSee `filterable` property for a more advanced filter option.","sourceRange":{"start":{"line":785,"column":12},"end":{"line":788,"column":13}},"metadata":{},"type":"boolean"},{"name":"highlight","description":"List of rules used to highligh specific columns, rows, or cells.\n\nPass an array of objects. Each object should have the following\nproperties:\n\n  * `{string} type` - If the highlight condition returns `true`,\n    the type determines what the grid will highlight. Set to\n    `'cell'` to highlight only the cell that passed the highlight\n    rule, `'row'` to highlight the row that holds the matching\n    cell, or `'column'` to highlight the column that holds the\n    matching cell.\n  * `{Function} condition` - Function that will be called by the\n    grid for each cell. If the function returns `true`, the\n    highlight rule will be triggered. If the function returns a\n    falsey value, the highlight rule will not be used. The function\n    will be passed three arguments: `cellContent` containing\n    the text of the cell, `column` containing a reference to the\n    `columns` object for the cell's column, and `item` as a reference\n    to the `tableData` item used to create the cell's row.\n  * `{string} color` - A valid CSS color (e.g. hex code or color\n    name). If the highlight condition returns `true`, the color\n    will be used to set the background color of the matching\n    cell, column, or row.\n\nExample highlight rules:\n\n```javascript\n[\n  {\n    type: 'cell',\n    condition: (cellContent, column, item) => { return cellContent == 'John Doe' },\n  },\n  {\n    type: 'row',\n    condition: (cellContent, item) => { return cellContent[0] == 'a' },\n    color: '#a8a8a8'\n  },\n  {\n    type: 'column',\n    condition (column, item) => { return column.name == 'age' },\n    color: 'pink'\n  }\n]\n```","sourceRange":{"start":{"line":836,"column":12},"end":{"line":838,"column":13}},"metadata":{},"type":"Array"},{"name":"default-column-width","description":"Default width for columns. Defaults to `100px` if undefined.\n\nColumn sizes should also be configured using the\n`defaultColumnFlexGrow` and `columns.flexGrow` properties to\nchange how each column sizes itself relative to other columns in\nthe grid.\n\nWhen column flex-grow properties are set to non-zero values,\nthis size behaves as a minimum width for the column.","sourceRange":{"start":{"line":859,"column":12},"end":{"line":861,"column":13}},"metadata":{},"type":"string"},{"name":"default-column-flex-grow","description":"Default flex-grow value for columns if none is defined in\n`columns.flexGrow`. Equivalent to the CSS flex-grow property.","sourceRange":{"start":{"line":867,"column":12},"end":{"line":869,"column":13}},"metadata":{},"type":"number"},{"name":"grid-height","description":"Defines the height of grid.\n\n  * Set to `'auto'` if the grid should grow to fit all of its rows\n  * Set to `'default'` or undefined to use the default height\n  * Set to any other valid CSS height valid (e.g. `400px`) to\n    define a static height for the grid area inside the\n    px-data-grid. This height will not include the table action\n    menu and other elements of the grid.\n\nSee the `flexToSize` property for a different strategy that sizes\nthe grid based on its parent element's height.","sourceRange":{"start":{"line":884,"column":12},"end":{"line":887,"column":13}},"metadata":{},"type":"string"},{"name":"item-id-path","description":"Path to a `tableData` item sub-property that serves as a unique\nidentifier for the item. Should be defined if the grid allows\nuser editing so the grid can pair new versions of each item\nwith the original data.\n\nPath must be unique for each item, must exist for every item,\nand should not be changed or be user editable.","sourceRange":{"start":{"line":898,"column":12},"end":{"line":900,"column":13}},"metadata":{},"type":"string"},{"name":"offer-filter-saving","description":"Set to allow users to save filters created in the advanced filter\ndialog. If enabled, the grid will fire `save-filters` events when\nthe user taps the save filter button.","sourceRange":{"start":{"line":907,"column":12},"end":{"line":909,"column":13}},"metadata":{},"type":"boolean"},{"name":"filterable","description":"Set to enable advanced filtering. When enabled, a filter\nbutton will be shown at the top of the grid. When the user clicks\non the filter button, a modal will be shown and the user can\nfilter visible items using different UI patterns.\n\nColumns should have the right `columns.type` set to ensure the\nadvanced filtering works as expected. See the `columns` property\nfor more information on setting the type, and for more advanced\nfiltering options that can be customized for `number` and `date`\ntype columns.","sourceRange":{"start":{"line":923,"column":12},"end":{"line":926,"column":13}},"metadata":{},"type":"boolean"},{"name":"string-comparators","description":"Comparison options shown in the advanced filtering UI for columns\nof type `string`. Valid options are:\n\n  * `'equals'`\n  * `'contains'`\n  * `'starts_with'`\n  * `'ends_with'`\n  * `'wildcard'`\n\nIf this array is undefined or empty, all options will be shown.","sourceRange":{"start":{"line":940,"column":12},"end":{"line":942,"column":13}},"metadata":{},"type":"Array"},{"name":"number-comparators","description":"Comparison options shown in the advanced filtering UI for columns\nof type `number`. Valid options are:\n\n  * `'less_than'`\n  * `'equals'`\n  * `'not_equal'`\n  * `'equal_or_greater_than'`\n  * `'equal_or_less_than'`\n  * `'greater_than'`\n\nIf this array is undefined or empty, all options will be shown.","sourceRange":{"start":{"line":957,"column":12},"end":{"line":959,"column":13}},"metadata":{},"type":"Array"}],"events":[{"type":"CustomEvent","name":"table-data-changed","description":"Fired when the `tableData` property changes.","metadata":{}},{"type":"CustomEvent","name":"selected-items-changed","description":"Fired when the `selectedItems` property changes.","metadata":{}},{"type":"CustomEvent","name":"active-item-changed","description":"Fired when the `activeItem` property changes.","metadata":{}}],"styling":{"cssVariables":[],"selectors":[]},"slots":[],"tagname":"px-data-grid-paginated"}]}